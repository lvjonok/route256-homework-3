package service

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

//go:generate minimock -i gitlab.ozon.dev/lvjonok/homework-3/internal/service-marketplace/service.DB -o ./db_mock.go -n DBMock

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	types "gitlab.ozon.dev/lvjonok/homework-3/core/models"
	"gitlab.ozon.dev/lvjonok/homework-3/internal/service-marketplace/models"
)

// DBMock implements DB
type DBMock struct {
	t minimock.Tester

	funcCreateProduct          func(ctx context.Context, pp1 *models.Product) (ip1 *types.ID, err error)
	inspectFuncCreateProduct   func(ctx context.Context, pp1 *models.Product)
	afterCreateProductCounter  uint64
	beforeCreateProductCounter uint64
	CreateProductMock          mDBMockCreateProduct

	funcCreateReview          func(ctx context.Context, rp1 *models.Review) (ip1 *types.ID, err error)
	inspectFuncCreateReview   func(ctx context.Context, rp1 *models.Review)
	afterCreateReviewCounter  uint64
	beforeCreateReviewCounter uint64
	CreateReviewMock          mDBMockCreateReview

	funcGetCart          func(ctx context.Context, ip1 *types.ID) (cp1 *models.Cart, err error)
	inspectFuncGetCart   func(ctx context.Context, ip1 *types.ID)
	afterGetCartCounter  uint64
	beforeGetCartCounter uint64
	GetCartMock          mDBMockGetCart

	funcGetProduct          func(ctx context.Context, ip1 *types.ID) (pp1 *models.Product, err error)
	inspectFuncGetProduct   func(ctx context.Context, ip1 *types.ID)
	afterGetProductCounter  uint64
	beforeGetProductCounter uint64
	GetProductMock          mDBMockGetProduct

	funcGetProductReviews          func(ctx context.Context, ip1 *types.ID) (ra1 []models.Review, err error)
	inspectFuncGetProductReviews   func(ctx context.Context, ip1 *types.ID)
	afterGetProductReviewsCounter  uint64
	beforeGetProductReviewsCounter uint64
	GetProductReviewsMock          mDBMockGetProductReviews

	funcUpdateCart          func(ctx context.Context, cp1 *models.Cart) (ip1 *types.ID, err error)
	inspectFuncUpdateCart   func(ctx context.Context, cp1 *models.Cart)
	afterUpdateCartCounter  uint64
	beforeUpdateCartCounter uint64
	UpdateCartMock          mDBMockUpdateCart
}

// NewDBMock returns a mock for DB
func NewDBMock(t minimock.Tester) *DBMock {
	m := &DBMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.CreateProductMock = mDBMockCreateProduct{mock: m}
	m.CreateProductMock.callArgs = []*DBMockCreateProductParams{}

	m.CreateReviewMock = mDBMockCreateReview{mock: m}
	m.CreateReviewMock.callArgs = []*DBMockCreateReviewParams{}

	m.GetCartMock = mDBMockGetCart{mock: m}
	m.GetCartMock.callArgs = []*DBMockGetCartParams{}

	m.GetProductMock = mDBMockGetProduct{mock: m}
	m.GetProductMock.callArgs = []*DBMockGetProductParams{}

	m.GetProductReviewsMock = mDBMockGetProductReviews{mock: m}
	m.GetProductReviewsMock.callArgs = []*DBMockGetProductReviewsParams{}

	m.UpdateCartMock = mDBMockUpdateCart{mock: m}
	m.UpdateCartMock.callArgs = []*DBMockUpdateCartParams{}

	return m
}

type mDBMockCreateProduct struct {
	mock               *DBMock
	defaultExpectation *DBMockCreateProductExpectation
	expectations       []*DBMockCreateProductExpectation

	callArgs []*DBMockCreateProductParams
	mutex    sync.RWMutex
}

// DBMockCreateProductExpectation specifies expectation struct of the DB.CreateProduct
type DBMockCreateProductExpectation struct {
	mock    *DBMock
	params  *DBMockCreateProductParams
	results *DBMockCreateProductResults
	Counter uint64
}

// DBMockCreateProductParams contains parameters of the DB.CreateProduct
type DBMockCreateProductParams struct {
	ctx context.Context
	pp1 *models.Product
}

// DBMockCreateProductResults contains results of the DB.CreateProduct
type DBMockCreateProductResults struct {
	ip1 *types.ID
	err error
}

// Expect sets up expected params for DB.CreateProduct
func (mmCreateProduct *mDBMockCreateProduct) Expect(ctx context.Context, pp1 *models.Product) *mDBMockCreateProduct {
	if mmCreateProduct.mock.funcCreateProduct != nil {
		mmCreateProduct.mock.t.Fatalf("DBMock.CreateProduct mock is already set by Set")
	}

	if mmCreateProduct.defaultExpectation == nil {
		mmCreateProduct.defaultExpectation = &DBMockCreateProductExpectation{}
	}

	mmCreateProduct.defaultExpectation.params = &DBMockCreateProductParams{ctx, pp1}
	for _, e := range mmCreateProduct.expectations {
		if minimock.Equal(e.params, mmCreateProduct.defaultExpectation.params) {
			mmCreateProduct.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmCreateProduct.defaultExpectation.params)
		}
	}

	return mmCreateProduct
}

// Inspect accepts an inspector function that has same arguments as the DB.CreateProduct
func (mmCreateProduct *mDBMockCreateProduct) Inspect(f func(ctx context.Context, pp1 *models.Product)) *mDBMockCreateProduct {
	if mmCreateProduct.mock.inspectFuncCreateProduct != nil {
		mmCreateProduct.mock.t.Fatalf("Inspect function is already set for DBMock.CreateProduct")
	}

	mmCreateProduct.mock.inspectFuncCreateProduct = f

	return mmCreateProduct
}

// Return sets up results that will be returned by DB.CreateProduct
func (mmCreateProduct *mDBMockCreateProduct) Return(ip1 *types.ID, err error) *DBMock {
	if mmCreateProduct.mock.funcCreateProduct != nil {
		mmCreateProduct.mock.t.Fatalf("DBMock.CreateProduct mock is already set by Set")
	}

	if mmCreateProduct.defaultExpectation == nil {
		mmCreateProduct.defaultExpectation = &DBMockCreateProductExpectation{mock: mmCreateProduct.mock}
	}
	mmCreateProduct.defaultExpectation.results = &DBMockCreateProductResults{ip1, err}
	return mmCreateProduct.mock
}

//Set uses given function f to mock the DB.CreateProduct method
func (mmCreateProduct *mDBMockCreateProduct) Set(f func(ctx context.Context, pp1 *models.Product) (ip1 *types.ID, err error)) *DBMock {
	if mmCreateProduct.defaultExpectation != nil {
		mmCreateProduct.mock.t.Fatalf("Default expectation is already set for the DB.CreateProduct method")
	}

	if len(mmCreateProduct.expectations) > 0 {
		mmCreateProduct.mock.t.Fatalf("Some expectations are already set for the DB.CreateProduct method")
	}

	mmCreateProduct.mock.funcCreateProduct = f
	return mmCreateProduct.mock
}

// When sets expectation for the DB.CreateProduct which will trigger the result defined by the following
// Then helper
func (mmCreateProduct *mDBMockCreateProduct) When(ctx context.Context, pp1 *models.Product) *DBMockCreateProductExpectation {
	if mmCreateProduct.mock.funcCreateProduct != nil {
		mmCreateProduct.mock.t.Fatalf("DBMock.CreateProduct mock is already set by Set")
	}

	expectation := &DBMockCreateProductExpectation{
		mock:   mmCreateProduct.mock,
		params: &DBMockCreateProductParams{ctx, pp1},
	}
	mmCreateProduct.expectations = append(mmCreateProduct.expectations, expectation)
	return expectation
}

// Then sets up DB.CreateProduct return parameters for the expectation previously defined by the When method
func (e *DBMockCreateProductExpectation) Then(ip1 *types.ID, err error) *DBMock {
	e.results = &DBMockCreateProductResults{ip1, err}
	return e.mock
}

// CreateProduct implements DB
func (mmCreateProduct *DBMock) CreateProduct(ctx context.Context, pp1 *models.Product) (ip1 *types.ID, err error) {
	mm_atomic.AddUint64(&mmCreateProduct.beforeCreateProductCounter, 1)
	defer mm_atomic.AddUint64(&mmCreateProduct.afterCreateProductCounter, 1)

	if mmCreateProduct.inspectFuncCreateProduct != nil {
		mmCreateProduct.inspectFuncCreateProduct(ctx, pp1)
	}

	mm_params := &DBMockCreateProductParams{ctx, pp1}

	// Record call args
	mmCreateProduct.CreateProductMock.mutex.Lock()
	mmCreateProduct.CreateProductMock.callArgs = append(mmCreateProduct.CreateProductMock.callArgs, mm_params)
	mmCreateProduct.CreateProductMock.mutex.Unlock()

	for _, e := range mmCreateProduct.CreateProductMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.ip1, e.results.err
		}
	}

	if mmCreateProduct.CreateProductMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmCreateProduct.CreateProductMock.defaultExpectation.Counter, 1)
		mm_want := mmCreateProduct.CreateProductMock.defaultExpectation.params
		mm_got := DBMockCreateProductParams{ctx, pp1}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmCreateProduct.t.Errorf("DBMock.CreateProduct got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmCreateProduct.CreateProductMock.defaultExpectation.results
		if mm_results == nil {
			mmCreateProduct.t.Fatal("No results are set for the DBMock.CreateProduct")
		}
		return (*mm_results).ip1, (*mm_results).err
	}
	if mmCreateProduct.funcCreateProduct != nil {
		return mmCreateProduct.funcCreateProduct(ctx, pp1)
	}
	mmCreateProduct.t.Fatalf("Unexpected call to DBMock.CreateProduct. %v %v", ctx, pp1)
	return
}

// CreateProductAfterCounter returns a count of finished DBMock.CreateProduct invocations
func (mmCreateProduct *DBMock) CreateProductAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateProduct.afterCreateProductCounter)
}

// CreateProductBeforeCounter returns a count of DBMock.CreateProduct invocations
func (mmCreateProduct *DBMock) CreateProductBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateProduct.beforeCreateProductCounter)
}

// Calls returns a list of arguments used in each call to DBMock.CreateProduct.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmCreateProduct *mDBMockCreateProduct) Calls() []*DBMockCreateProductParams {
	mmCreateProduct.mutex.RLock()

	argCopy := make([]*DBMockCreateProductParams, len(mmCreateProduct.callArgs))
	copy(argCopy, mmCreateProduct.callArgs)

	mmCreateProduct.mutex.RUnlock()

	return argCopy
}

// MinimockCreateProductDone returns true if the count of the CreateProduct invocations corresponds
// the number of defined expectations
func (m *DBMock) MinimockCreateProductDone() bool {
	for _, e := range m.CreateProductMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CreateProductMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCreateProductCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreateProduct != nil && mm_atomic.LoadUint64(&m.afterCreateProductCounter) < 1 {
		return false
	}
	return true
}

// MinimockCreateProductInspect logs each unmet expectation
func (m *DBMock) MinimockCreateProductInspect() {
	for _, e := range m.CreateProductMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to DBMock.CreateProduct with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CreateProductMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCreateProductCounter) < 1 {
		if m.CreateProductMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to DBMock.CreateProduct")
		} else {
			m.t.Errorf("Expected call to DBMock.CreateProduct with params: %#v", *m.CreateProductMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreateProduct != nil && mm_atomic.LoadUint64(&m.afterCreateProductCounter) < 1 {
		m.t.Error("Expected call to DBMock.CreateProduct")
	}
}

type mDBMockCreateReview struct {
	mock               *DBMock
	defaultExpectation *DBMockCreateReviewExpectation
	expectations       []*DBMockCreateReviewExpectation

	callArgs []*DBMockCreateReviewParams
	mutex    sync.RWMutex
}

// DBMockCreateReviewExpectation specifies expectation struct of the DB.CreateReview
type DBMockCreateReviewExpectation struct {
	mock    *DBMock
	params  *DBMockCreateReviewParams
	results *DBMockCreateReviewResults
	Counter uint64
}

// DBMockCreateReviewParams contains parameters of the DB.CreateReview
type DBMockCreateReviewParams struct {
	ctx context.Context
	rp1 *models.Review
}

// DBMockCreateReviewResults contains results of the DB.CreateReview
type DBMockCreateReviewResults struct {
	ip1 *types.ID
	err error
}

// Expect sets up expected params for DB.CreateReview
func (mmCreateReview *mDBMockCreateReview) Expect(ctx context.Context, rp1 *models.Review) *mDBMockCreateReview {
	if mmCreateReview.mock.funcCreateReview != nil {
		mmCreateReview.mock.t.Fatalf("DBMock.CreateReview mock is already set by Set")
	}

	if mmCreateReview.defaultExpectation == nil {
		mmCreateReview.defaultExpectation = &DBMockCreateReviewExpectation{}
	}

	mmCreateReview.defaultExpectation.params = &DBMockCreateReviewParams{ctx, rp1}
	for _, e := range mmCreateReview.expectations {
		if minimock.Equal(e.params, mmCreateReview.defaultExpectation.params) {
			mmCreateReview.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmCreateReview.defaultExpectation.params)
		}
	}

	return mmCreateReview
}

// Inspect accepts an inspector function that has same arguments as the DB.CreateReview
func (mmCreateReview *mDBMockCreateReview) Inspect(f func(ctx context.Context, rp1 *models.Review)) *mDBMockCreateReview {
	if mmCreateReview.mock.inspectFuncCreateReview != nil {
		mmCreateReview.mock.t.Fatalf("Inspect function is already set for DBMock.CreateReview")
	}

	mmCreateReview.mock.inspectFuncCreateReview = f

	return mmCreateReview
}

// Return sets up results that will be returned by DB.CreateReview
func (mmCreateReview *mDBMockCreateReview) Return(ip1 *types.ID, err error) *DBMock {
	if mmCreateReview.mock.funcCreateReview != nil {
		mmCreateReview.mock.t.Fatalf("DBMock.CreateReview mock is already set by Set")
	}

	if mmCreateReview.defaultExpectation == nil {
		mmCreateReview.defaultExpectation = &DBMockCreateReviewExpectation{mock: mmCreateReview.mock}
	}
	mmCreateReview.defaultExpectation.results = &DBMockCreateReviewResults{ip1, err}
	return mmCreateReview.mock
}

//Set uses given function f to mock the DB.CreateReview method
func (mmCreateReview *mDBMockCreateReview) Set(f func(ctx context.Context, rp1 *models.Review) (ip1 *types.ID, err error)) *DBMock {
	if mmCreateReview.defaultExpectation != nil {
		mmCreateReview.mock.t.Fatalf("Default expectation is already set for the DB.CreateReview method")
	}

	if len(mmCreateReview.expectations) > 0 {
		mmCreateReview.mock.t.Fatalf("Some expectations are already set for the DB.CreateReview method")
	}

	mmCreateReview.mock.funcCreateReview = f
	return mmCreateReview.mock
}

// When sets expectation for the DB.CreateReview which will trigger the result defined by the following
// Then helper
func (mmCreateReview *mDBMockCreateReview) When(ctx context.Context, rp1 *models.Review) *DBMockCreateReviewExpectation {
	if mmCreateReview.mock.funcCreateReview != nil {
		mmCreateReview.mock.t.Fatalf("DBMock.CreateReview mock is already set by Set")
	}

	expectation := &DBMockCreateReviewExpectation{
		mock:   mmCreateReview.mock,
		params: &DBMockCreateReviewParams{ctx, rp1},
	}
	mmCreateReview.expectations = append(mmCreateReview.expectations, expectation)
	return expectation
}

// Then sets up DB.CreateReview return parameters for the expectation previously defined by the When method
func (e *DBMockCreateReviewExpectation) Then(ip1 *types.ID, err error) *DBMock {
	e.results = &DBMockCreateReviewResults{ip1, err}
	return e.mock
}

// CreateReview implements DB
func (mmCreateReview *DBMock) CreateReview(ctx context.Context, rp1 *models.Review) (ip1 *types.ID, err error) {
	mm_atomic.AddUint64(&mmCreateReview.beforeCreateReviewCounter, 1)
	defer mm_atomic.AddUint64(&mmCreateReview.afterCreateReviewCounter, 1)

	if mmCreateReview.inspectFuncCreateReview != nil {
		mmCreateReview.inspectFuncCreateReview(ctx, rp1)
	}

	mm_params := &DBMockCreateReviewParams{ctx, rp1}

	// Record call args
	mmCreateReview.CreateReviewMock.mutex.Lock()
	mmCreateReview.CreateReviewMock.callArgs = append(mmCreateReview.CreateReviewMock.callArgs, mm_params)
	mmCreateReview.CreateReviewMock.mutex.Unlock()

	for _, e := range mmCreateReview.CreateReviewMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.ip1, e.results.err
		}
	}

	if mmCreateReview.CreateReviewMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmCreateReview.CreateReviewMock.defaultExpectation.Counter, 1)
		mm_want := mmCreateReview.CreateReviewMock.defaultExpectation.params
		mm_got := DBMockCreateReviewParams{ctx, rp1}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmCreateReview.t.Errorf("DBMock.CreateReview got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmCreateReview.CreateReviewMock.defaultExpectation.results
		if mm_results == nil {
			mmCreateReview.t.Fatal("No results are set for the DBMock.CreateReview")
		}
		return (*mm_results).ip1, (*mm_results).err
	}
	if mmCreateReview.funcCreateReview != nil {
		return mmCreateReview.funcCreateReview(ctx, rp1)
	}
	mmCreateReview.t.Fatalf("Unexpected call to DBMock.CreateReview. %v %v", ctx, rp1)
	return
}

// CreateReviewAfterCounter returns a count of finished DBMock.CreateReview invocations
func (mmCreateReview *DBMock) CreateReviewAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateReview.afterCreateReviewCounter)
}

// CreateReviewBeforeCounter returns a count of DBMock.CreateReview invocations
func (mmCreateReview *DBMock) CreateReviewBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateReview.beforeCreateReviewCounter)
}

// Calls returns a list of arguments used in each call to DBMock.CreateReview.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmCreateReview *mDBMockCreateReview) Calls() []*DBMockCreateReviewParams {
	mmCreateReview.mutex.RLock()

	argCopy := make([]*DBMockCreateReviewParams, len(mmCreateReview.callArgs))
	copy(argCopy, mmCreateReview.callArgs)

	mmCreateReview.mutex.RUnlock()

	return argCopy
}

// MinimockCreateReviewDone returns true if the count of the CreateReview invocations corresponds
// the number of defined expectations
func (m *DBMock) MinimockCreateReviewDone() bool {
	for _, e := range m.CreateReviewMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CreateReviewMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCreateReviewCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreateReview != nil && mm_atomic.LoadUint64(&m.afterCreateReviewCounter) < 1 {
		return false
	}
	return true
}

// MinimockCreateReviewInspect logs each unmet expectation
func (m *DBMock) MinimockCreateReviewInspect() {
	for _, e := range m.CreateReviewMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to DBMock.CreateReview with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CreateReviewMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCreateReviewCounter) < 1 {
		if m.CreateReviewMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to DBMock.CreateReview")
		} else {
			m.t.Errorf("Expected call to DBMock.CreateReview with params: %#v", *m.CreateReviewMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreateReview != nil && mm_atomic.LoadUint64(&m.afterCreateReviewCounter) < 1 {
		m.t.Error("Expected call to DBMock.CreateReview")
	}
}

type mDBMockGetCart struct {
	mock               *DBMock
	defaultExpectation *DBMockGetCartExpectation
	expectations       []*DBMockGetCartExpectation

	callArgs []*DBMockGetCartParams
	mutex    sync.RWMutex
}

// DBMockGetCartExpectation specifies expectation struct of the DB.GetCart
type DBMockGetCartExpectation struct {
	mock    *DBMock
	params  *DBMockGetCartParams
	results *DBMockGetCartResults
	Counter uint64
}

// DBMockGetCartParams contains parameters of the DB.GetCart
type DBMockGetCartParams struct {
	ctx context.Context
	ip1 *types.ID
}

// DBMockGetCartResults contains results of the DB.GetCart
type DBMockGetCartResults struct {
	cp1 *models.Cart
	err error
}

// Expect sets up expected params for DB.GetCart
func (mmGetCart *mDBMockGetCart) Expect(ctx context.Context, ip1 *types.ID) *mDBMockGetCart {
	if mmGetCart.mock.funcGetCart != nil {
		mmGetCart.mock.t.Fatalf("DBMock.GetCart mock is already set by Set")
	}

	if mmGetCart.defaultExpectation == nil {
		mmGetCart.defaultExpectation = &DBMockGetCartExpectation{}
	}

	mmGetCart.defaultExpectation.params = &DBMockGetCartParams{ctx, ip1}
	for _, e := range mmGetCart.expectations {
		if minimock.Equal(e.params, mmGetCart.defaultExpectation.params) {
			mmGetCart.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetCart.defaultExpectation.params)
		}
	}

	return mmGetCart
}

// Inspect accepts an inspector function that has same arguments as the DB.GetCart
func (mmGetCart *mDBMockGetCart) Inspect(f func(ctx context.Context, ip1 *types.ID)) *mDBMockGetCart {
	if mmGetCart.mock.inspectFuncGetCart != nil {
		mmGetCart.mock.t.Fatalf("Inspect function is already set for DBMock.GetCart")
	}

	mmGetCart.mock.inspectFuncGetCart = f

	return mmGetCart
}

// Return sets up results that will be returned by DB.GetCart
func (mmGetCart *mDBMockGetCart) Return(cp1 *models.Cart, err error) *DBMock {
	if mmGetCart.mock.funcGetCart != nil {
		mmGetCart.mock.t.Fatalf("DBMock.GetCart mock is already set by Set")
	}

	if mmGetCart.defaultExpectation == nil {
		mmGetCart.defaultExpectation = &DBMockGetCartExpectation{mock: mmGetCart.mock}
	}
	mmGetCart.defaultExpectation.results = &DBMockGetCartResults{cp1, err}
	return mmGetCart.mock
}

//Set uses given function f to mock the DB.GetCart method
func (mmGetCart *mDBMockGetCart) Set(f func(ctx context.Context, ip1 *types.ID) (cp1 *models.Cart, err error)) *DBMock {
	if mmGetCart.defaultExpectation != nil {
		mmGetCart.mock.t.Fatalf("Default expectation is already set for the DB.GetCart method")
	}

	if len(mmGetCart.expectations) > 0 {
		mmGetCart.mock.t.Fatalf("Some expectations are already set for the DB.GetCart method")
	}

	mmGetCart.mock.funcGetCart = f
	return mmGetCart.mock
}

// When sets expectation for the DB.GetCart which will trigger the result defined by the following
// Then helper
func (mmGetCart *mDBMockGetCart) When(ctx context.Context, ip1 *types.ID) *DBMockGetCartExpectation {
	if mmGetCart.mock.funcGetCart != nil {
		mmGetCart.mock.t.Fatalf("DBMock.GetCart mock is already set by Set")
	}

	expectation := &DBMockGetCartExpectation{
		mock:   mmGetCart.mock,
		params: &DBMockGetCartParams{ctx, ip1},
	}
	mmGetCart.expectations = append(mmGetCart.expectations, expectation)
	return expectation
}

// Then sets up DB.GetCart return parameters for the expectation previously defined by the When method
func (e *DBMockGetCartExpectation) Then(cp1 *models.Cart, err error) *DBMock {
	e.results = &DBMockGetCartResults{cp1, err}
	return e.mock
}

// GetCart implements DB
func (mmGetCart *DBMock) GetCart(ctx context.Context, ip1 *types.ID) (cp1 *models.Cart, err error) {
	mm_atomic.AddUint64(&mmGetCart.beforeGetCartCounter, 1)
	defer mm_atomic.AddUint64(&mmGetCart.afterGetCartCounter, 1)

	if mmGetCart.inspectFuncGetCart != nil {
		mmGetCart.inspectFuncGetCart(ctx, ip1)
	}

	mm_params := &DBMockGetCartParams{ctx, ip1}

	// Record call args
	mmGetCart.GetCartMock.mutex.Lock()
	mmGetCart.GetCartMock.callArgs = append(mmGetCart.GetCartMock.callArgs, mm_params)
	mmGetCart.GetCartMock.mutex.Unlock()

	for _, e := range mmGetCart.GetCartMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.cp1, e.results.err
		}
	}

	if mmGetCart.GetCartMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetCart.GetCartMock.defaultExpectation.Counter, 1)
		mm_want := mmGetCart.GetCartMock.defaultExpectation.params
		mm_got := DBMockGetCartParams{ctx, ip1}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetCart.t.Errorf("DBMock.GetCart got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetCart.GetCartMock.defaultExpectation.results
		if mm_results == nil {
			mmGetCart.t.Fatal("No results are set for the DBMock.GetCart")
		}
		return (*mm_results).cp1, (*mm_results).err
	}
	if mmGetCart.funcGetCart != nil {
		return mmGetCart.funcGetCart(ctx, ip1)
	}
	mmGetCart.t.Fatalf("Unexpected call to DBMock.GetCart. %v %v", ctx, ip1)
	return
}

// GetCartAfterCounter returns a count of finished DBMock.GetCart invocations
func (mmGetCart *DBMock) GetCartAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetCart.afterGetCartCounter)
}

// GetCartBeforeCounter returns a count of DBMock.GetCart invocations
func (mmGetCart *DBMock) GetCartBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetCart.beforeGetCartCounter)
}

// Calls returns a list of arguments used in each call to DBMock.GetCart.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetCart *mDBMockGetCart) Calls() []*DBMockGetCartParams {
	mmGetCart.mutex.RLock()

	argCopy := make([]*DBMockGetCartParams, len(mmGetCart.callArgs))
	copy(argCopy, mmGetCart.callArgs)

	mmGetCart.mutex.RUnlock()

	return argCopy
}

// MinimockGetCartDone returns true if the count of the GetCart invocations corresponds
// the number of defined expectations
func (m *DBMock) MinimockGetCartDone() bool {
	for _, e := range m.GetCartMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetCartMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetCartCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetCart != nil && mm_atomic.LoadUint64(&m.afterGetCartCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetCartInspect logs each unmet expectation
func (m *DBMock) MinimockGetCartInspect() {
	for _, e := range m.GetCartMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to DBMock.GetCart with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetCartMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetCartCounter) < 1 {
		if m.GetCartMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to DBMock.GetCart")
		} else {
			m.t.Errorf("Expected call to DBMock.GetCart with params: %#v", *m.GetCartMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetCart != nil && mm_atomic.LoadUint64(&m.afterGetCartCounter) < 1 {
		m.t.Error("Expected call to DBMock.GetCart")
	}
}

type mDBMockGetProduct struct {
	mock               *DBMock
	defaultExpectation *DBMockGetProductExpectation
	expectations       []*DBMockGetProductExpectation

	callArgs []*DBMockGetProductParams
	mutex    sync.RWMutex
}

// DBMockGetProductExpectation specifies expectation struct of the DB.GetProduct
type DBMockGetProductExpectation struct {
	mock    *DBMock
	params  *DBMockGetProductParams
	results *DBMockGetProductResults
	Counter uint64
}

// DBMockGetProductParams contains parameters of the DB.GetProduct
type DBMockGetProductParams struct {
	ctx context.Context
	ip1 *types.ID
}

// DBMockGetProductResults contains results of the DB.GetProduct
type DBMockGetProductResults struct {
	pp1 *models.Product
	err error
}

// Expect sets up expected params for DB.GetProduct
func (mmGetProduct *mDBMockGetProduct) Expect(ctx context.Context, ip1 *types.ID) *mDBMockGetProduct {
	if mmGetProduct.mock.funcGetProduct != nil {
		mmGetProduct.mock.t.Fatalf("DBMock.GetProduct mock is already set by Set")
	}

	if mmGetProduct.defaultExpectation == nil {
		mmGetProduct.defaultExpectation = &DBMockGetProductExpectation{}
	}

	mmGetProduct.defaultExpectation.params = &DBMockGetProductParams{ctx, ip1}
	for _, e := range mmGetProduct.expectations {
		if minimock.Equal(e.params, mmGetProduct.defaultExpectation.params) {
			mmGetProduct.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetProduct.defaultExpectation.params)
		}
	}

	return mmGetProduct
}

// Inspect accepts an inspector function that has same arguments as the DB.GetProduct
func (mmGetProduct *mDBMockGetProduct) Inspect(f func(ctx context.Context, ip1 *types.ID)) *mDBMockGetProduct {
	if mmGetProduct.mock.inspectFuncGetProduct != nil {
		mmGetProduct.mock.t.Fatalf("Inspect function is already set for DBMock.GetProduct")
	}

	mmGetProduct.mock.inspectFuncGetProduct = f

	return mmGetProduct
}

// Return sets up results that will be returned by DB.GetProduct
func (mmGetProduct *mDBMockGetProduct) Return(pp1 *models.Product, err error) *DBMock {
	if mmGetProduct.mock.funcGetProduct != nil {
		mmGetProduct.mock.t.Fatalf("DBMock.GetProduct mock is already set by Set")
	}

	if mmGetProduct.defaultExpectation == nil {
		mmGetProduct.defaultExpectation = &DBMockGetProductExpectation{mock: mmGetProduct.mock}
	}
	mmGetProduct.defaultExpectation.results = &DBMockGetProductResults{pp1, err}
	return mmGetProduct.mock
}

//Set uses given function f to mock the DB.GetProduct method
func (mmGetProduct *mDBMockGetProduct) Set(f func(ctx context.Context, ip1 *types.ID) (pp1 *models.Product, err error)) *DBMock {
	if mmGetProduct.defaultExpectation != nil {
		mmGetProduct.mock.t.Fatalf("Default expectation is already set for the DB.GetProduct method")
	}

	if len(mmGetProduct.expectations) > 0 {
		mmGetProduct.mock.t.Fatalf("Some expectations are already set for the DB.GetProduct method")
	}

	mmGetProduct.mock.funcGetProduct = f
	return mmGetProduct.mock
}

// When sets expectation for the DB.GetProduct which will trigger the result defined by the following
// Then helper
func (mmGetProduct *mDBMockGetProduct) When(ctx context.Context, ip1 *types.ID) *DBMockGetProductExpectation {
	if mmGetProduct.mock.funcGetProduct != nil {
		mmGetProduct.mock.t.Fatalf("DBMock.GetProduct mock is already set by Set")
	}

	expectation := &DBMockGetProductExpectation{
		mock:   mmGetProduct.mock,
		params: &DBMockGetProductParams{ctx, ip1},
	}
	mmGetProduct.expectations = append(mmGetProduct.expectations, expectation)
	return expectation
}

// Then sets up DB.GetProduct return parameters for the expectation previously defined by the When method
func (e *DBMockGetProductExpectation) Then(pp1 *models.Product, err error) *DBMock {
	e.results = &DBMockGetProductResults{pp1, err}
	return e.mock
}

// GetProduct implements DB
func (mmGetProduct *DBMock) GetProduct(ctx context.Context, ip1 *types.ID) (pp1 *models.Product, err error) {
	mm_atomic.AddUint64(&mmGetProduct.beforeGetProductCounter, 1)
	defer mm_atomic.AddUint64(&mmGetProduct.afterGetProductCounter, 1)

	if mmGetProduct.inspectFuncGetProduct != nil {
		mmGetProduct.inspectFuncGetProduct(ctx, ip1)
	}

	mm_params := &DBMockGetProductParams{ctx, ip1}

	// Record call args
	mmGetProduct.GetProductMock.mutex.Lock()
	mmGetProduct.GetProductMock.callArgs = append(mmGetProduct.GetProductMock.callArgs, mm_params)
	mmGetProduct.GetProductMock.mutex.Unlock()

	for _, e := range mmGetProduct.GetProductMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.pp1, e.results.err
		}
	}

	if mmGetProduct.GetProductMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetProduct.GetProductMock.defaultExpectation.Counter, 1)
		mm_want := mmGetProduct.GetProductMock.defaultExpectation.params
		mm_got := DBMockGetProductParams{ctx, ip1}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetProduct.t.Errorf("DBMock.GetProduct got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetProduct.GetProductMock.defaultExpectation.results
		if mm_results == nil {
			mmGetProduct.t.Fatal("No results are set for the DBMock.GetProduct")
		}
		return (*mm_results).pp1, (*mm_results).err
	}
	if mmGetProduct.funcGetProduct != nil {
		return mmGetProduct.funcGetProduct(ctx, ip1)
	}
	mmGetProduct.t.Fatalf("Unexpected call to DBMock.GetProduct. %v %v", ctx, ip1)
	return
}

// GetProductAfterCounter returns a count of finished DBMock.GetProduct invocations
func (mmGetProduct *DBMock) GetProductAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetProduct.afterGetProductCounter)
}

// GetProductBeforeCounter returns a count of DBMock.GetProduct invocations
func (mmGetProduct *DBMock) GetProductBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetProduct.beforeGetProductCounter)
}

// Calls returns a list of arguments used in each call to DBMock.GetProduct.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetProduct *mDBMockGetProduct) Calls() []*DBMockGetProductParams {
	mmGetProduct.mutex.RLock()

	argCopy := make([]*DBMockGetProductParams, len(mmGetProduct.callArgs))
	copy(argCopy, mmGetProduct.callArgs)

	mmGetProduct.mutex.RUnlock()

	return argCopy
}

// MinimockGetProductDone returns true if the count of the GetProduct invocations corresponds
// the number of defined expectations
func (m *DBMock) MinimockGetProductDone() bool {
	for _, e := range m.GetProductMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetProductMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetProductCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetProduct != nil && mm_atomic.LoadUint64(&m.afterGetProductCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetProductInspect logs each unmet expectation
func (m *DBMock) MinimockGetProductInspect() {
	for _, e := range m.GetProductMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to DBMock.GetProduct with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetProductMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetProductCounter) < 1 {
		if m.GetProductMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to DBMock.GetProduct")
		} else {
			m.t.Errorf("Expected call to DBMock.GetProduct with params: %#v", *m.GetProductMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetProduct != nil && mm_atomic.LoadUint64(&m.afterGetProductCounter) < 1 {
		m.t.Error("Expected call to DBMock.GetProduct")
	}
}

type mDBMockGetProductReviews struct {
	mock               *DBMock
	defaultExpectation *DBMockGetProductReviewsExpectation
	expectations       []*DBMockGetProductReviewsExpectation

	callArgs []*DBMockGetProductReviewsParams
	mutex    sync.RWMutex
}

// DBMockGetProductReviewsExpectation specifies expectation struct of the DB.GetProductReviews
type DBMockGetProductReviewsExpectation struct {
	mock    *DBMock
	params  *DBMockGetProductReviewsParams
	results *DBMockGetProductReviewsResults
	Counter uint64
}

// DBMockGetProductReviewsParams contains parameters of the DB.GetProductReviews
type DBMockGetProductReviewsParams struct {
	ctx context.Context
	ip1 *types.ID
}

// DBMockGetProductReviewsResults contains results of the DB.GetProductReviews
type DBMockGetProductReviewsResults struct {
	ra1 []models.Review
	err error
}

// Expect sets up expected params for DB.GetProductReviews
func (mmGetProductReviews *mDBMockGetProductReviews) Expect(ctx context.Context, ip1 *types.ID) *mDBMockGetProductReviews {
	if mmGetProductReviews.mock.funcGetProductReviews != nil {
		mmGetProductReviews.mock.t.Fatalf("DBMock.GetProductReviews mock is already set by Set")
	}

	if mmGetProductReviews.defaultExpectation == nil {
		mmGetProductReviews.defaultExpectation = &DBMockGetProductReviewsExpectation{}
	}

	mmGetProductReviews.defaultExpectation.params = &DBMockGetProductReviewsParams{ctx, ip1}
	for _, e := range mmGetProductReviews.expectations {
		if minimock.Equal(e.params, mmGetProductReviews.defaultExpectation.params) {
			mmGetProductReviews.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetProductReviews.defaultExpectation.params)
		}
	}

	return mmGetProductReviews
}

// Inspect accepts an inspector function that has same arguments as the DB.GetProductReviews
func (mmGetProductReviews *mDBMockGetProductReviews) Inspect(f func(ctx context.Context, ip1 *types.ID)) *mDBMockGetProductReviews {
	if mmGetProductReviews.mock.inspectFuncGetProductReviews != nil {
		mmGetProductReviews.mock.t.Fatalf("Inspect function is already set for DBMock.GetProductReviews")
	}

	mmGetProductReviews.mock.inspectFuncGetProductReviews = f

	return mmGetProductReviews
}

// Return sets up results that will be returned by DB.GetProductReviews
func (mmGetProductReviews *mDBMockGetProductReviews) Return(ra1 []models.Review, err error) *DBMock {
	if mmGetProductReviews.mock.funcGetProductReviews != nil {
		mmGetProductReviews.mock.t.Fatalf("DBMock.GetProductReviews mock is already set by Set")
	}

	if mmGetProductReviews.defaultExpectation == nil {
		mmGetProductReviews.defaultExpectation = &DBMockGetProductReviewsExpectation{mock: mmGetProductReviews.mock}
	}
	mmGetProductReviews.defaultExpectation.results = &DBMockGetProductReviewsResults{ra1, err}
	return mmGetProductReviews.mock
}

//Set uses given function f to mock the DB.GetProductReviews method
func (mmGetProductReviews *mDBMockGetProductReviews) Set(f func(ctx context.Context, ip1 *types.ID) (ra1 []models.Review, err error)) *DBMock {
	if mmGetProductReviews.defaultExpectation != nil {
		mmGetProductReviews.mock.t.Fatalf("Default expectation is already set for the DB.GetProductReviews method")
	}

	if len(mmGetProductReviews.expectations) > 0 {
		mmGetProductReviews.mock.t.Fatalf("Some expectations are already set for the DB.GetProductReviews method")
	}

	mmGetProductReviews.mock.funcGetProductReviews = f
	return mmGetProductReviews.mock
}

// When sets expectation for the DB.GetProductReviews which will trigger the result defined by the following
// Then helper
func (mmGetProductReviews *mDBMockGetProductReviews) When(ctx context.Context, ip1 *types.ID) *DBMockGetProductReviewsExpectation {
	if mmGetProductReviews.mock.funcGetProductReviews != nil {
		mmGetProductReviews.mock.t.Fatalf("DBMock.GetProductReviews mock is already set by Set")
	}

	expectation := &DBMockGetProductReviewsExpectation{
		mock:   mmGetProductReviews.mock,
		params: &DBMockGetProductReviewsParams{ctx, ip1},
	}
	mmGetProductReviews.expectations = append(mmGetProductReviews.expectations, expectation)
	return expectation
}

// Then sets up DB.GetProductReviews return parameters for the expectation previously defined by the When method
func (e *DBMockGetProductReviewsExpectation) Then(ra1 []models.Review, err error) *DBMock {
	e.results = &DBMockGetProductReviewsResults{ra1, err}
	return e.mock
}

// GetProductReviews implements DB
func (mmGetProductReviews *DBMock) GetProductReviews(ctx context.Context, ip1 *types.ID) (ra1 []models.Review, err error) {
	mm_atomic.AddUint64(&mmGetProductReviews.beforeGetProductReviewsCounter, 1)
	defer mm_atomic.AddUint64(&mmGetProductReviews.afterGetProductReviewsCounter, 1)

	if mmGetProductReviews.inspectFuncGetProductReviews != nil {
		mmGetProductReviews.inspectFuncGetProductReviews(ctx, ip1)
	}

	mm_params := &DBMockGetProductReviewsParams{ctx, ip1}

	// Record call args
	mmGetProductReviews.GetProductReviewsMock.mutex.Lock()
	mmGetProductReviews.GetProductReviewsMock.callArgs = append(mmGetProductReviews.GetProductReviewsMock.callArgs, mm_params)
	mmGetProductReviews.GetProductReviewsMock.mutex.Unlock()

	for _, e := range mmGetProductReviews.GetProductReviewsMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.ra1, e.results.err
		}
	}

	if mmGetProductReviews.GetProductReviewsMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetProductReviews.GetProductReviewsMock.defaultExpectation.Counter, 1)
		mm_want := mmGetProductReviews.GetProductReviewsMock.defaultExpectation.params
		mm_got := DBMockGetProductReviewsParams{ctx, ip1}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetProductReviews.t.Errorf("DBMock.GetProductReviews got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetProductReviews.GetProductReviewsMock.defaultExpectation.results
		if mm_results == nil {
			mmGetProductReviews.t.Fatal("No results are set for the DBMock.GetProductReviews")
		}
		return (*mm_results).ra1, (*mm_results).err
	}
	if mmGetProductReviews.funcGetProductReviews != nil {
		return mmGetProductReviews.funcGetProductReviews(ctx, ip1)
	}
	mmGetProductReviews.t.Fatalf("Unexpected call to DBMock.GetProductReviews. %v %v", ctx, ip1)
	return
}

// GetProductReviewsAfterCounter returns a count of finished DBMock.GetProductReviews invocations
func (mmGetProductReviews *DBMock) GetProductReviewsAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetProductReviews.afterGetProductReviewsCounter)
}

// GetProductReviewsBeforeCounter returns a count of DBMock.GetProductReviews invocations
func (mmGetProductReviews *DBMock) GetProductReviewsBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetProductReviews.beforeGetProductReviewsCounter)
}

// Calls returns a list of arguments used in each call to DBMock.GetProductReviews.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetProductReviews *mDBMockGetProductReviews) Calls() []*DBMockGetProductReviewsParams {
	mmGetProductReviews.mutex.RLock()

	argCopy := make([]*DBMockGetProductReviewsParams, len(mmGetProductReviews.callArgs))
	copy(argCopy, mmGetProductReviews.callArgs)

	mmGetProductReviews.mutex.RUnlock()

	return argCopy
}

// MinimockGetProductReviewsDone returns true if the count of the GetProductReviews invocations corresponds
// the number of defined expectations
func (m *DBMock) MinimockGetProductReviewsDone() bool {
	for _, e := range m.GetProductReviewsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetProductReviewsMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetProductReviewsCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetProductReviews != nil && mm_atomic.LoadUint64(&m.afterGetProductReviewsCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetProductReviewsInspect logs each unmet expectation
func (m *DBMock) MinimockGetProductReviewsInspect() {
	for _, e := range m.GetProductReviewsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to DBMock.GetProductReviews with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetProductReviewsMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetProductReviewsCounter) < 1 {
		if m.GetProductReviewsMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to DBMock.GetProductReviews")
		} else {
			m.t.Errorf("Expected call to DBMock.GetProductReviews with params: %#v", *m.GetProductReviewsMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetProductReviews != nil && mm_atomic.LoadUint64(&m.afterGetProductReviewsCounter) < 1 {
		m.t.Error("Expected call to DBMock.GetProductReviews")
	}
}

type mDBMockUpdateCart struct {
	mock               *DBMock
	defaultExpectation *DBMockUpdateCartExpectation
	expectations       []*DBMockUpdateCartExpectation

	callArgs []*DBMockUpdateCartParams
	mutex    sync.RWMutex
}

// DBMockUpdateCartExpectation specifies expectation struct of the DB.UpdateCart
type DBMockUpdateCartExpectation struct {
	mock    *DBMock
	params  *DBMockUpdateCartParams
	results *DBMockUpdateCartResults
	Counter uint64
}

// DBMockUpdateCartParams contains parameters of the DB.UpdateCart
type DBMockUpdateCartParams struct {
	ctx context.Context
	cp1 *models.Cart
}

// DBMockUpdateCartResults contains results of the DB.UpdateCart
type DBMockUpdateCartResults struct {
	ip1 *types.ID
	err error
}

// Expect sets up expected params for DB.UpdateCart
func (mmUpdateCart *mDBMockUpdateCart) Expect(ctx context.Context, cp1 *models.Cart) *mDBMockUpdateCart {
	if mmUpdateCart.mock.funcUpdateCart != nil {
		mmUpdateCart.mock.t.Fatalf("DBMock.UpdateCart mock is already set by Set")
	}

	if mmUpdateCart.defaultExpectation == nil {
		mmUpdateCart.defaultExpectation = &DBMockUpdateCartExpectation{}
	}

	mmUpdateCart.defaultExpectation.params = &DBMockUpdateCartParams{ctx, cp1}
	for _, e := range mmUpdateCart.expectations {
		if minimock.Equal(e.params, mmUpdateCart.defaultExpectation.params) {
			mmUpdateCart.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmUpdateCart.defaultExpectation.params)
		}
	}

	return mmUpdateCart
}

// Inspect accepts an inspector function that has same arguments as the DB.UpdateCart
func (mmUpdateCart *mDBMockUpdateCart) Inspect(f func(ctx context.Context, cp1 *models.Cart)) *mDBMockUpdateCart {
	if mmUpdateCart.mock.inspectFuncUpdateCart != nil {
		mmUpdateCart.mock.t.Fatalf("Inspect function is already set for DBMock.UpdateCart")
	}

	mmUpdateCart.mock.inspectFuncUpdateCart = f

	return mmUpdateCart
}

// Return sets up results that will be returned by DB.UpdateCart
func (mmUpdateCart *mDBMockUpdateCart) Return(ip1 *types.ID, err error) *DBMock {
	if mmUpdateCart.mock.funcUpdateCart != nil {
		mmUpdateCart.mock.t.Fatalf("DBMock.UpdateCart mock is already set by Set")
	}

	if mmUpdateCart.defaultExpectation == nil {
		mmUpdateCart.defaultExpectation = &DBMockUpdateCartExpectation{mock: mmUpdateCart.mock}
	}
	mmUpdateCart.defaultExpectation.results = &DBMockUpdateCartResults{ip1, err}
	return mmUpdateCart.mock
}

//Set uses given function f to mock the DB.UpdateCart method
func (mmUpdateCart *mDBMockUpdateCart) Set(f func(ctx context.Context, cp1 *models.Cart) (ip1 *types.ID, err error)) *DBMock {
	if mmUpdateCart.defaultExpectation != nil {
		mmUpdateCart.mock.t.Fatalf("Default expectation is already set for the DB.UpdateCart method")
	}

	if len(mmUpdateCart.expectations) > 0 {
		mmUpdateCart.mock.t.Fatalf("Some expectations are already set for the DB.UpdateCart method")
	}

	mmUpdateCart.mock.funcUpdateCart = f
	return mmUpdateCart.mock
}

// When sets expectation for the DB.UpdateCart which will trigger the result defined by the following
// Then helper
func (mmUpdateCart *mDBMockUpdateCart) When(ctx context.Context, cp1 *models.Cart) *DBMockUpdateCartExpectation {
	if mmUpdateCart.mock.funcUpdateCart != nil {
		mmUpdateCart.mock.t.Fatalf("DBMock.UpdateCart mock is already set by Set")
	}

	expectation := &DBMockUpdateCartExpectation{
		mock:   mmUpdateCart.mock,
		params: &DBMockUpdateCartParams{ctx, cp1},
	}
	mmUpdateCart.expectations = append(mmUpdateCart.expectations, expectation)
	return expectation
}

// Then sets up DB.UpdateCart return parameters for the expectation previously defined by the When method
func (e *DBMockUpdateCartExpectation) Then(ip1 *types.ID, err error) *DBMock {
	e.results = &DBMockUpdateCartResults{ip1, err}
	return e.mock
}

// UpdateCart implements DB
func (mmUpdateCart *DBMock) UpdateCart(ctx context.Context, cp1 *models.Cart) (ip1 *types.ID, err error) {
	mm_atomic.AddUint64(&mmUpdateCart.beforeUpdateCartCounter, 1)
	defer mm_atomic.AddUint64(&mmUpdateCart.afterUpdateCartCounter, 1)

	if mmUpdateCart.inspectFuncUpdateCart != nil {
		mmUpdateCart.inspectFuncUpdateCart(ctx, cp1)
	}

	mm_params := &DBMockUpdateCartParams{ctx, cp1}

	// Record call args
	mmUpdateCart.UpdateCartMock.mutex.Lock()
	mmUpdateCart.UpdateCartMock.callArgs = append(mmUpdateCart.UpdateCartMock.callArgs, mm_params)
	mmUpdateCart.UpdateCartMock.mutex.Unlock()

	for _, e := range mmUpdateCart.UpdateCartMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.ip1, e.results.err
		}
	}

	if mmUpdateCart.UpdateCartMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmUpdateCart.UpdateCartMock.defaultExpectation.Counter, 1)
		mm_want := mmUpdateCart.UpdateCartMock.defaultExpectation.params
		mm_got := DBMockUpdateCartParams{ctx, cp1}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmUpdateCart.t.Errorf("DBMock.UpdateCart got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmUpdateCart.UpdateCartMock.defaultExpectation.results
		if mm_results == nil {
			mmUpdateCart.t.Fatal("No results are set for the DBMock.UpdateCart")
		}
		return (*mm_results).ip1, (*mm_results).err
	}
	if mmUpdateCart.funcUpdateCart != nil {
		return mmUpdateCart.funcUpdateCart(ctx, cp1)
	}
	mmUpdateCart.t.Fatalf("Unexpected call to DBMock.UpdateCart. %v %v", ctx, cp1)
	return
}

// UpdateCartAfterCounter returns a count of finished DBMock.UpdateCart invocations
func (mmUpdateCart *DBMock) UpdateCartAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUpdateCart.afterUpdateCartCounter)
}

// UpdateCartBeforeCounter returns a count of DBMock.UpdateCart invocations
func (mmUpdateCart *DBMock) UpdateCartBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUpdateCart.beforeUpdateCartCounter)
}

// Calls returns a list of arguments used in each call to DBMock.UpdateCart.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmUpdateCart *mDBMockUpdateCart) Calls() []*DBMockUpdateCartParams {
	mmUpdateCart.mutex.RLock()

	argCopy := make([]*DBMockUpdateCartParams, len(mmUpdateCart.callArgs))
	copy(argCopy, mmUpdateCart.callArgs)

	mmUpdateCart.mutex.RUnlock()

	return argCopy
}

// MinimockUpdateCartDone returns true if the count of the UpdateCart invocations corresponds
// the number of defined expectations
func (m *DBMock) MinimockUpdateCartDone() bool {
	for _, e := range m.UpdateCartMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.UpdateCartMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterUpdateCartCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcUpdateCart != nil && mm_atomic.LoadUint64(&m.afterUpdateCartCounter) < 1 {
		return false
	}
	return true
}

// MinimockUpdateCartInspect logs each unmet expectation
func (m *DBMock) MinimockUpdateCartInspect() {
	for _, e := range m.UpdateCartMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to DBMock.UpdateCart with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.UpdateCartMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterUpdateCartCounter) < 1 {
		if m.UpdateCartMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to DBMock.UpdateCart")
		} else {
			m.t.Errorf("Expected call to DBMock.UpdateCart with params: %#v", *m.UpdateCartMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcUpdateCart != nil && mm_atomic.LoadUint64(&m.afterUpdateCartCounter) < 1 {
		m.t.Error("Expected call to DBMock.UpdateCart")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *DBMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockCreateProductInspect()

		m.MinimockCreateReviewInspect()

		m.MinimockGetCartInspect()

		m.MinimockGetProductInspect()

		m.MinimockGetProductReviewsInspect()

		m.MinimockUpdateCartInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *DBMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *DBMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockCreateProductDone() &&
		m.MinimockCreateReviewDone() &&
		m.MinimockGetCartDone() &&
		m.MinimockGetProductDone() &&
		m.MinimockGetProductReviewsDone() &&
		m.MinimockUpdateCartDone()
}
