package service

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

//go:generate minimock -i gitlab.ozon.dev/lvjonok/homework-3/internal/service-marketplace/service.Metrics -o ./metrics_mock.go -n MetricsMock

import (
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// MetricsMock implements Metrics
type MetricsMock struct {
	t minimock.Tester

	funcAddReviewErrorsInc          func()
	inspectFuncAddReviewErrorsInc   func()
	afterAddReviewErrorsIncCounter  uint64
	beforeAddReviewErrorsIncCounter uint64
	AddReviewErrorsIncMock          mMetricsMockAddReviewErrorsInc

	funcAddReviewInc          func()
	inspectFuncAddReviewInc   func()
	afterAddReviewIncCounter  uint64
	beforeAddReviewIncCounter uint64
	AddReviewIncMock          mMetricsMockAddReviewInc

	funcCreateProductErrorsInc          func()
	inspectFuncCreateProductErrorsInc   func()
	afterCreateProductErrorsIncCounter  uint64
	beforeCreateProductErrorsIncCounter uint64
	CreateProductErrorsIncMock          mMetricsMockCreateProductErrorsInc

	funcCreateProductInc          func()
	inspectFuncCreateProductInc   func()
	afterCreateProductIncCounter  uint64
	beforeCreateProductIncCounter uint64
	CreateProductIncMock          mMetricsMockCreateProductInc

	funcGetCartErrorsInc          func()
	inspectFuncGetCartErrorsInc   func()
	afterGetCartErrorsIncCounter  uint64
	beforeGetCartErrorsIncCounter uint64
	GetCartErrorsIncMock          mMetricsMockGetCartErrorsInc

	funcGetCartInc          func()
	inspectFuncGetCartInc   func()
	afterGetCartIncCounter  uint64
	beforeGetCartIncCounter uint64
	GetCartIncMock          mMetricsMockGetCartInc

	funcGetProductErrorsInc          func()
	inspectFuncGetProductErrorsInc   func()
	afterGetProductErrorsIncCounter  uint64
	beforeGetProductErrorsIncCounter uint64
	GetProductErrorsIncMock          mMetricsMockGetProductErrorsInc

	funcGetProductInc          func()
	inspectFuncGetProductInc   func()
	afterGetProductIncCounter  uint64
	beforeGetProductIncCounter uint64
	GetProductIncMock          mMetricsMockGetProductInc

	funcGetReviewsErrorsInc          func()
	inspectFuncGetReviewsErrorsInc   func()
	afterGetReviewsErrorsIncCounter  uint64
	beforeGetReviewsErrorsIncCounter uint64
	GetReviewsErrorsIncMock          mMetricsMockGetReviewsErrorsInc

	funcGetReviewsInc          func()
	inspectFuncGetReviewsInc   func()
	afterGetReviewsIncCounter  uint64
	beforeGetReviewsIncCounter uint64
	GetReviewsIncMock          mMetricsMockGetReviewsInc

	funcRequestErrorsInc          func()
	inspectFuncRequestErrorsInc   func()
	afterRequestErrorsIncCounter  uint64
	beforeRequestErrorsIncCounter uint64
	RequestErrorsIncMock          mMetricsMockRequestErrorsInc

	funcRequestsInc          func()
	inspectFuncRequestsInc   func()
	afterRequestsIncCounter  uint64
	beforeRequestsIncCounter uint64
	RequestsIncMock          mMetricsMockRequestsInc

	funcUpdateCartErrorsInc          func()
	inspectFuncUpdateCartErrorsInc   func()
	afterUpdateCartErrorsIncCounter  uint64
	beforeUpdateCartErrorsIncCounter uint64
	UpdateCartErrorsIncMock          mMetricsMockUpdateCartErrorsInc

	funcUpdateCartInc          func()
	inspectFuncUpdateCartInc   func()
	afterUpdateCartIncCounter  uint64
	beforeUpdateCartIncCounter uint64
	UpdateCartIncMock          mMetricsMockUpdateCartInc
}

// NewMetricsMock returns a mock for Metrics
func NewMetricsMock(t minimock.Tester) *MetricsMock {
	m := &MetricsMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.AddReviewErrorsIncMock = mMetricsMockAddReviewErrorsInc{mock: m}

	m.AddReviewIncMock = mMetricsMockAddReviewInc{mock: m}

	m.CreateProductErrorsIncMock = mMetricsMockCreateProductErrorsInc{mock: m}

	m.CreateProductIncMock = mMetricsMockCreateProductInc{mock: m}

	m.GetCartErrorsIncMock = mMetricsMockGetCartErrorsInc{mock: m}

	m.GetCartIncMock = mMetricsMockGetCartInc{mock: m}

	m.GetProductErrorsIncMock = mMetricsMockGetProductErrorsInc{mock: m}

	m.GetProductIncMock = mMetricsMockGetProductInc{mock: m}

	m.GetReviewsErrorsIncMock = mMetricsMockGetReviewsErrorsInc{mock: m}

	m.GetReviewsIncMock = mMetricsMockGetReviewsInc{mock: m}

	m.RequestErrorsIncMock = mMetricsMockRequestErrorsInc{mock: m}

	m.RequestsIncMock = mMetricsMockRequestsInc{mock: m}

	m.UpdateCartErrorsIncMock = mMetricsMockUpdateCartErrorsInc{mock: m}

	m.UpdateCartIncMock = mMetricsMockUpdateCartInc{mock: m}

	return m
}

type mMetricsMockAddReviewErrorsInc struct {
	mock               *MetricsMock
	defaultExpectation *MetricsMockAddReviewErrorsIncExpectation
	expectations       []*MetricsMockAddReviewErrorsIncExpectation
}

// MetricsMockAddReviewErrorsIncExpectation specifies expectation struct of the Metrics.AddReviewErrorsInc
type MetricsMockAddReviewErrorsIncExpectation struct {
	mock *MetricsMock

	Counter uint64
}

// Expect sets up expected params for Metrics.AddReviewErrorsInc
func (mmAddReviewErrorsInc *mMetricsMockAddReviewErrorsInc) Expect() *mMetricsMockAddReviewErrorsInc {
	if mmAddReviewErrorsInc.mock.funcAddReviewErrorsInc != nil {
		mmAddReviewErrorsInc.mock.t.Fatalf("MetricsMock.AddReviewErrorsInc mock is already set by Set")
	}

	if mmAddReviewErrorsInc.defaultExpectation == nil {
		mmAddReviewErrorsInc.defaultExpectation = &MetricsMockAddReviewErrorsIncExpectation{}
	}

	return mmAddReviewErrorsInc
}

// Inspect accepts an inspector function that has same arguments as the Metrics.AddReviewErrorsInc
func (mmAddReviewErrorsInc *mMetricsMockAddReviewErrorsInc) Inspect(f func()) *mMetricsMockAddReviewErrorsInc {
	if mmAddReviewErrorsInc.mock.inspectFuncAddReviewErrorsInc != nil {
		mmAddReviewErrorsInc.mock.t.Fatalf("Inspect function is already set for MetricsMock.AddReviewErrorsInc")
	}

	mmAddReviewErrorsInc.mock.inspectFuncAddReviewErrorsInc = f

	return mmAddReviewErrorsInc
}

// Return sets up results that will be returned by Metrics.AddReviewErrorsInc
func (mmAddReviewErrorsInc *mMetricsMockAddReviewErrorsInc) Return() *MetricsMock {
	if mmAddReviewErrorsInc.mock.funcAddReviewErrorsInc != nil {
		mmAddReviewErrorsInc.mock.t.Fatalf("MetricsMock.AddReviewErrorsInc mock is already set by Set")
	}

	if mmAddReviewErrorsInc.defaultExpectation == nil {
		mmAddReviewErrorsInc.defaultExpectation = &MetricsMockAddReviewErrorsIncExpectation{mock: mmAddReviewErrorsInc.mock}
	}

	return mmAddReviewErrorsInc.mock
}

//Set uses given function f to mock the Metrics.AddReviewErrorsInc method
func (mmAddReviewErrorsInc *mMetricsMockAddReviewErrorsInc) Set(f func()) *MetricsMock {
	if mmAddReviewErrorsInc.defaultExpectation != nil {
		mmAddReviewErrorsInc.mock.t.Fatalf("Default expectation is already set for the Metrics.AddReviewErrorsInc method")
	}

	if len(mmAddReviewErrorsInc.expectations) > 0 {
		mmAddReviewErrorsInc.mock.t.Fatalf("Some expectations are already set for the Metrics.AddReviewErrorsInc method")
	}

	mmAddReviewErrorsInc.mock.funcAddReviewErrorsInc = f
	return mmAddReviewErrorsInc.mock
}

// AddReviewErrorsInc implements Metrics
func (mmAddReviewErrorsInc *MetricsMock) AddReviewErrorsInc() {
	mm_atomic.AddUint64(&mmAddReviewErrorsInc.beforeAddReviewErrorsIncCounter, 1)
	defer mm_atomic.AddUint64(&mmAddReviewErrorsInc.afterAddReviewErrorsIncCounter, 1)

	if mmAddReviewErrorsInc.inspectFuncAddReviewErrorsInc != nil {
		mmAddReviewErrorsInc.inspectFuncAddReviewErrorsInc()
	}

	if mmAddReviewErrorsInc.AddReviewErrorsIncMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmAddReviewErrorsInc.AddReviewErrorsIncMock.defaultExpectation.Counter, 1)

		return

	}
	if mmAddReviewErrorsInc.funcAddReviewErrorsInc != nil {
		mmAddReviewErrorsInc.funcAddReviewErrorsInc()
		return
	}
	mmAddReviewErrorsInc.t.Fatalf("Unexpected call to MetricsMock.AddReviewErrorsInc.")

}

// AddReviewErrorsIncAfterCounter returns a count of finished MetricsMock.AddReviewErrorsInc invocations
func (mmAddReviewErrorsInc *MetricsMock) AddReviewErrorsIncAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmAddReviewErrorsInc.afterAddReviewErrorsIncCounter)
}

// AddReviewErrorsIncBeforeCounter returns a count of MetricsMock.AddReviewErrorsInc invocations
func (mmAddReviewErrorsInc *MetricsMock) AddReviewErrorsIncBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmAddReviewErrorsInc.beforeAddReviewErrorsIncCounter)
}

// MinimockAddReviewErrorsIncDone returns true if the count of the AddReviewErrorsInc invocations corresponds
// the number of defined expectations
func (m *MetricsMock) MinimockAddReviewErrorsIncDone() bool {
	for _, e := range m.AddReviewErrorsIncMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.AddReviewErrorsIncMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterAddReviewErrorsIncCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcAddReviewErrorsInc != nil && mm_atomic.LoadUint64(&m.afterAddReviewErrorsIncCounter) < 1 {
		return false
	}
	return true
}

// MinimockAddReviewErrorsIncInspect logs each unmet expectation
func (m *MetricsMock) MinimockAddReviewErrorsIncInspect() {
	for _, e := range m.AddReviewErrorsIncMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to MetricsMock.AddReviewErrorsInc")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.AddReviewErrorsIncMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterAddReviewErrorsIncCounter) < 1 {
		m.t.Error("Expected call to MetricsMock.AddReviewErrorsInc")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcAddReviewErrorsInc != nil && mm_atomic.LoadUint64(&m.afterAddReviewErrorsIncCounter) < 1 {
		m.t.Error("Expected call to MetricsMock.AddReviewErrorsInc")
	}
}

type mMetricsMockAddReviewInc struct {
	mock               *MetricsMock
	defaultExpectation *MetricsMockAddReviewIncExpectation
	expectations       []*MetricsMockAddReviewIncExpectation
}

// MetricsMockAddReviewIncExpectation specifies expectation struct of the Metrics.AddReviewInc
type MetricsMockAddReviewIncExpectation struct {
	mock *MetricsMock

	Counter uint64
}

// Expect sets up expected params for Metrics.AddReviewInc
func (mmAddReviewInc *mMetricsMockAddReviewInc) Expect() *mMetricsMockAddReviewInc {
	if mmAddReviewInc.mock.funcAddReviewInc != nil {
		mmAddReviewInc.mock.t.Fatalf("MetricsMock.AddReviewInc mock is already set by Set")
	}

	if mmAddReviewInc.defaultExpectation == nil {
		mmAddReviewInc.defaultExpectation = &MetricsMockAddReviewIncExpectation{}
	}

	return mmAddReviewInc
}

// Inspect accepts an inspector function that has same arguments as the Metrics.AddReviewInc
func (mmAddReviewInc *mMetricsMockAddReviewInc) Inspect(f func()) *mMetricsMockAddReviewInc {
	if mmAddReviewInc.mock.inspectFuncAddReviewInc != nil {
		mmAddReviewInc.mock.t.Fatalf("Inspect function is already set for MetricsMock.AddReviewInc")
	}

	mmAddReviewInc.mock.inspectFuncAddReviewInc = f

	return mmAddReviewInc
}

// Return sets up results that will be returned by Metrics.AddReviewInc
func (mmAddReviewInc *mMetricsMockAddReviewInc) Return() *MetricsMock {
	if mmAddReviewInc.mock.funcAddReviewInc != nil {
		mmAddReviewInc.mock.t.Fatalf("MetricsMock.AddReviewInc mock is already set by Set")
	}

	if mmAddReviewInc.defaultExpectation == nil {
		mmAddReviewInc.defaultExpectation = &MetricsMockAddReviewIncExpectation{mock: mmAddReviewInc.mock}
	}

	return mmAddReviewInc.mock
}

//Set uses given function f to mock the Metrics.AddReviewInc method
func (mmAddReviewInc *mMetricsMockAddReviewInc) Set(f func()) *MetricsMock {
	if mmAddReviewInc.defaultExpectation != nil {
		mmAddReviewInc.mock.t.Fatalf("Default expectation is already set for the Metrics.AddReviewInc method")
	}

	if len(mmAddReviewInc.expectations) > 0 {
		mmAddReviewInc.mock.t.Fatalf("Some expectations are already set for the Metrics.AddReviewInc method")
	}

	mmAddReviewInc.mock.funcAddReviewInc = f
	return mmAddReviewInc.mock
}

// AddReviewInc implements Metrics
func (mmAddReviewInc *MetricsMock) AddReviewInc() {
	mm_atomic.AddUint64(&mmAddReviewInc.beforeAddReviewIncCounter, 1)
	defer mm_atomic.AddUint64(&mmAddReviewInc.afterAddReviewIncCounter, 1)

	if mmAddReviewInc.inspectFuncAddReviewInc != nil {
		mmAddReviewInc.inspectFuncAddReviewInc()
	}

	if mmAddReviewInc.AddReviewIncMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmAddReviewInc.AddReviewIncMock.defaultExpectation.Counter, 1)

		return

	}
	if mmAddReviewInc.funcAddReviewInc != nil {
		mmAddReviewInc.funcAddReviewInc()
		return
	}
	mmAddReviewInc.t.Fatalf("Unexpected call to MetricsMock.AddReviewInc.")

}

// AddReviewIncAfterCounter returns a count of finished MetricsMock.AddReviewInc invocations
func (mmAddReviewInc *MetricsMock) AddReviewIncAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmAddReviewInc.afterAddReviewIncCounter)
}

// AddReviewIncBeforeCounter returns a count of MetricsMock.AddReviewInc invocations
func (mmAddReviewInc *MetricsMock) AddReviewIncBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmAddReviewInc.beforeAddReviewIncCounter)
}

// MinimockAddReviewIncDone returns true if the count of the AddReviewInc invocations corresponds
// the number of defined expectations
func (m *MetricsMock) MinimockAddReviewIncDone() bool {
	for _, e := range m.AddReviewIncMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.AddReviewIncMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterAddReviewIncCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcAddReviewInc != nil && mm_atomic.LoadUint64(&m.afterAddReviewIncCounter) < 1 {
		return false
	}
	return true
}

// MinimockAddReviewIncInspect logs each unmet expectation
func (m *MetricsMock) MinimockAddReviewIncInspect() {
	for _, e := range m.AddReviewIncMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to MetricsMock.AddReviewInc")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.AddReviewIncMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterAddReviewIncCounter) < 1 {
		m.t.Error("Expected call to MetricsMock.AddReviewInc")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcAddReviewInc != nil && mm_atomic.LoadUint64(&m.afterAddReviewIncCounter) < 1 {
		m.t.Error("Expected call to MetricsMock.AddReviewInc")
	}
}

type mMetricsMockCreateProductErrorsInc struct {
	mock               *MetricsMock
	defaultExpectation *MetricsMockCreateProductErrorsIncExpectation
	expectations       []*MetricsMockCreateProductErrorsIncExpectation
}

// MetricsMockCreateProductErrorsIncExpectation specifies expectation struct of the Metrics.CreateProductErrorsInc
type MetricsMockCreateProductErrorsIncExpectation struct {
	mock *MetricsMock

	Counter uint64
}

// Expect sets up expected params for Metrics.CreateProductErrorsInc
func (mmCreateProductErrorsInc *mMetricsMockCreateProductErrorsInc) Expect() *mMetricsMockCreateProductErrorsInc {
	if mmCreateProductErrorsInc.mock.funcCreateProductErrorsInc != nil {
		mmCreateProductErrorsInc.mock.t.Fatalf("MetricsMock.CreateProductErrorsInc mock is already set by Set")
	}

	if mmCreateProductErrorsInc.defaultExpectation == nil {
		mmCreateProductErrorsInc.defaultExpectation = &MetricsMockCreateProductErrorsIncExpectation{}
	}

	return mmCreateProductErrorsInc
}

// Inspect accepts an inspector function that has same arguments as the Metrics.CreateProductErrorsInc
func (mmCreateProductErrorsInc *mMetricsMockCreateProductErrorsInc) Inspect(f func()) *mMetricsMockCreateProductErrorsInc {
	if mmCreateProductErrorsInc.mock.inspectFuncCreateProductErrorsInc != nil {
		mmCreateProductErrorsInc.mock.t.Fatalf("Inspect function is already set for MetricsMock.CreateProductErrorsInc")
	}

	mmCreateProductErrorsInc.mock.inspectFuncCreateProductErrorsInc = f

	return mmCreateProductErrorsInc
}

// Return sets up results that will be returned by Metrics.CreateProductErrorsInc
func (mmCreateProductErrorsInc *mMetricsMockCreateProductErrorsInc) Return() *MetricsMock {
	if mmCreateProductErrorsInc.mock.funcCreateProductErrorsInc != nil {
		mmCreateProductErrorsInc.mock.t.Fatalf("MetricsMock.CreateProductErrorsInc mock is already set by Set")
	}

	if mmCreateProductErrorsInc.defaultExpectation == nil {
		mmCreateProductErrorsInc.defaultExpectation = &MetricsMockCreateProductErrorsIncExpectation{mock: mmCreateProductErrorsInc.mock}
	}

	return mmCreateProductErrorsInc.mock
}

//Set uses given function f to mock the Metrics.CreateProductErrorsInc method
func (mmCreateProductErrorsInc *mMetricsMockCreateProductErrorsInc) Set(f func()) *MetricsMock {
	if mmCreateProductErrorsInc.defaultExpectation != nil {
		mmCreateProductErrorsInc.mock.t.Fatalf("Default expectation is already set for the Metrics.CreateProductErrorsInc method")
	}

	if len(mmCreateProductErrorsInc.expectations) > 0 {
		mmCreateProductErrorsInc.mock.t.Fatalf("Some expectations are already set for the Metrics.CreateProductErrorsInc method")
	}

	mmCreateProductErrorsInc.mock.funcCreateProductErrorsInc = f
	return mmCreateProductErrorsInc.mock
}

// CreateProductErrorsInc implements Metrics
func (mmCreateProductErrorsInc *MetricsMock) CreateProductErrorsInc() {
	mm_atomic.AddUint64(&mmCreateProductErrorsInc.beforeCreateProductErrorsIncCounter, 1)
	defer mm_atomic.AddUint64(&mmCreateProductErrorsInc.afterCreateProductErrorsIncCounter, 1)

	if mmCreateProductErrorsInc.inspectFuncCreateProductErrorsInc != nil {
		mmCreateProductErrorsInc.inspectFuncCreateProductErrorsInc()
	}

	if mmCreateProductErrorsInc.CreateProductErrorsIncMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmCreateProductErrorsInc.CreateProductErrorsIncMock.defaultExpectation.Counter, 1)

		return

	}
	if mmCreateProductErrorsInc.funcCreateProductErrorsInc != nil {
		mmCreateProductErrorsInc.funcCreateProductErrorsInc()
		return
	}
	mmCreateProductErrorsInc.t.Fatalf("Unexpected call to MetricsMock.CreateProductErrorsInc.")

}

// CreateProductErrorsIncAfterCounter returns a count of finished MetricsMock.CreateProductErrorsInc invocations
func (mmCreateProductErrorsInc *MetricsMock) CreateProductErrorsIncAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateProductErrorsInc.afterCreateProductErrorsIncCounter)
}

// CreateProductErrorsIncBeforeCounter returns a count of MetricsMock.CreateProductErrorsInc invocations
func (mmCreateProductErrorsInc *MetricsMock) CreateProductErrorsIncBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateProductErrorsInc.beforeCreateProductErrorsIncCounter)
}

// MinimockCreateProductErrorsIncDone returns true if the count of the CreateProductErrorsInc invocations corresponds
// the number of defined expectations
func (m *MetricsMock) MinimockCreateProductErrorsIncDone() bool {
	for _, e := range m.CreateProductErrorsIncMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CreateProductErrorsIncMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCreateProductErrorsIncCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreateProductErrorsInc != nil && mm_atomic.LoadUint64(&m.afterCreateProductErrorsIncCounter) < 1 {
		return false
	}
	return true
}

// MinimockCreateProductErrorsIncInspect logs each unmet expectation
func (m *MetricsMock) MinimockCreateProductErrorsIncInspect() {
	for _, e := range m.CreateProductErrorsIncMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to MetricsMock.CreateProductErrorsInc")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CreateProductErrorsIncMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCreateProductErrorsIncCounter) < 1 {
		m.t.Error("Expected call to MetricsMock.CreateProductErrorsInc")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreateProductErrorsInc != nil && mm_atomic.LoadUint64(&m.afterCreateProductErrorsIncCounter) < 1 {
		m.t.Error("Expected call to MetricsMock.CreateProductErrorsInc")
	}
}

type mMetricsMockCreateProductInc struct {
	mock               *MetricsMock
	defaultExpectation *MetricsMockCreateProductIncExpectation
	expectations       []*MetricsMockCreateProductIncExpectation
}

// MetricsMockCreateProductIncExpectation specifies expectation struct of the Metrics.CreateProductInc
type MetricsMockCreateProductIncExpectation struct {
	mock *MetricsMock

	Counter uint64
}

// Expect sets up expected params for Metrics.CreateProductInc
func (mmCreateProductInc *mMetricsMockCreateProductInc) Expect() *mMetricsMockCreateProductInc {
	if mmCreateProductInc.mock.funcCreateProductInc != nil {
		mmCreateProductInc.mock.t.Fatalf("MetricsMock.CreateProductInc mock is already set by Set")
	}

	if mmCreateProductInc.defaultExpectation == nil {
		mmCreateProductInc.defaultExpectation = &MetricsMockCreateProductIncExpectation{}
	}

	return mmCreateProductInc
}

// Inspect accepts an inspector function that has same arguments as the Metrics.CreateProductInc
func (mmCreateProductInc *mMetricsMockCreateProductInc) Inspect(f func()) *mMetricsMockCreateProductInc {
	if mmCreateProductInc.mock.inspectFuncCreateProductInc != nil {
		mmCreateProductInc.mock.t.Fatalf("Inspect function is already set for MetricsMock.CreateProductInc")
	}

	mmCreateProductInc.mock.inspectFuncCreateProductInc = f

	return mmCreateProductInc
}

// Return sets up results that will be returned by Metrics.CreateProductInc
func (mmCreateProductInc *mMetricsMockCreateProductInc) Return() *MetricsMock {
	if mmCreateProductInc.mock.funcCreateProductInc != nil {
		mmCreateProductInc.mock.t.Fatalf("MetricsMock.CreateProductInc mock is already set by Set")
	}

	if mmCreateProductInc.defaultExpectation == nil {
		mmCreateProductInc.defaultExpectation = &MetricsMockCreateProductIncExpectation{mock: mmCreateProductInc.mock}
	}

	return mmCreateProductInc.mock
}

//Set uses given function f to mock the Metrics.CreateProductInc method
func (mmCreateProductInc *mMetricsMockCreateProductInc) Set(f func()) *MetricsMock {
	if mmCreateProductInc.defaultExpectation != nil {
		mmCreateProductInc.mock.t.Fatalf("Default expectation is already set for the Metrics.CreateProductInc method")
	}

	if len(mmCreateProductInc.expectations) > 0 {
		mmCreateProductInc.mock.t.Fatalf("Some expectations are already set for the Metrics.CreateProductInc method")
	}

	mmCreateProductInc.mock.funcCreateProductInc = f
	return mmCreateProductInc.mock
}

// CreateProductInc implements Metrics
func (mmCreateProductInc *MetricsMock) CreateProductInc() {
	mm_atomic.AddUint64(&mmCreateProductInc.beforeCreateProductIncCounter, 1)
	defer mm_atomic.AddUint64(&mmCreateProductInc.afterCreateProductIncCounter, 1)

	if mmCreateProductInc.inspectFuncCreateProductInc != nil {
		mmCreateProductInc.inspectFuncCreateProductInc()
	}

	if mmCreateProductInc.CreateProductIncMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmCreateProductInc.CreateProductIncMock.defaultExpectation.Counter, 1)

		return

	}
	if mmCreateProductInc.funcCreateProductInc != nil {
		mmCreateProductInc.funcCreateProductInc()
		return
	}
	mmCreateProductInc.t.Fatalf("Unexpected call to MetricsMock.CreateProductInc.")

}

// CreateProductIncAfterCounter returns a count of finished MetricsMock.CreateProductInc invocations
func (mmCreateProductInc *MetricsMock) CreateProductIncAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateProductInc.afterCreateProductIncCounter)
}

// CreateProductIncBeforeCounter returns a count of MetricsMock.CreateProductInc invocations
func (mmCreateProductInc *MetricsMock) CreateProductIncBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateProductInc.beforeCreateProductIncCounter)
}

// MinimockCreateProductIncDone returns true if the count of the CreateProductInc invocations corresponds
// the number of defined expectations
func (m *MetricsMock) MinimockCreateProductIncDone() bool {
	for _, e := range m.CreateProductIncMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CreateProductIncMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCreateProductIncCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreateProductInc != nil && mm_atomic.LoadUint64(&m.afterCreateProductIncCounter) < 1 {
		return false
	}
	return true
}

// MinimockCreateProductIncInspect logs each unmet expectation
func (m *MetricsMock) MinimockCreateProductIncInspect() {
	for _, e := range m.CreateProductIncMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to MetricsMock.CreateProductInc")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CreateProductIncMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCreateProductIncCounter) < 1 {
		m.t.Error("Expected call to MetricsMock.CreateProductInc")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreateProductInc != nil && mm_atomic.LoadUint64(&m.afterCreateProductIncCounter) < 1 {
		m.t.Error("Expected call to MetricsMock.CreateProductInc")
	}
}

type mMetricsMockGetCartErrorsInc struct {
	mock               *MetricsMock
	defaultExpectation *MetricsMockGetCartErrorsIncExpectation
	expectations       []*MetricsMockGetCartErrorsIncExpectation
}

// MetricsMockGetCartErrorsIncExpectation specifies expectation struct of the Metrics.GetCartErrorsInc
type MetricsMockGetCartErrorsIncExpectation struct {
	mock *MetricsMock

	Counter uint64
}

// Expect sets up expected params for Metrics.GetCartErrorsInc
func (mmGetCartErrorsInc *mMetricsMockGetCartErrorsInc) Expect() *mMetricsMockGetCartErrorsInc {
	if mmGetCartErrorsInc.mock.funcGetCartErrorsInc != nil {
		mmGetCartErrorsInc.mock.t.Fatalf("MetricsMock.GetCartErrorsInc mock is already set by Set")
	}

	if mmGetCartErrorsInc.defaultExpectation == nil {
		mmGetCartErrorsInc.defaultExpectation = &MetricsMockGetCartErrorsIncExpectation{}
	}

	return mmGetCartErrorsInc
}

// Inspect accepts an inspector function that has same arguments as the Metrics.GetCartErrorsInc
func (mmGetCartErrorsInc *mMetricsMockGetCartErrorsInc) Inspect(f func()) *mMetricsMockGetCartErrorsInc {
	if mmGetCartErrorsInc.mock.inspectFuncGetCartErrorsInc != nil {
		mmGetCartErrorsInc.mock.t.Fatalf("Inspect function is already set for MetricsMock.GetCartErrorsInc")
	}

	mmGetCartErrorsInc.mock.inspectFuncGetCartErrorsInc = f

	return mmGetCartErrorsInc
}

// Return sets up results that will be returned by Metrics.GetCartErrorsInc
func (mmGetCartErrorsInc *mMetricsMockGetCartErrorsInc) Return() *MetricsMock {
	if mmGetCartErrorsInc.mock.funcGetCartErrorsInc != nil {
		mmGetCartErrorsInc.mock.t.Fatalf("MetricsMock.GetCartErrorsInc mock is already set by Set")
	}

	if mmGetCartErrorsInc.defaultExpectation == nil {
		mmGetCartErrorsInc.defaultExpectation = &MetricsMockGetCartErrorsIncExpectation{mock: mmGetCartErrorsInc.mock}
	}

	return mmGetCartErrorsInc.mock
}

//Set uses given function f to mock the Metrics.GetCartErrorsInc method
func (mmGetCartErrorsInc *mMetricsMockGetCartErrorsInc) Set(f func()) *MetricsMock {
	if mmGetCartErrorsInc.defaultExpectation != nil {
		mmGetCartErrorsInc.mock.t.Fatalf("Default expectation is already set for the Metrics.GetCartErrorsInc method")
	}

	if len(mmGetCartErrorsInc.expectations) > 0 {
		mmGetCartErrorsInc.mock.t.Fatalf("Some expectations are already set for the Metrics.GetCartErrorsInc method")
	}

	mmGetCartErrorsInc.mock.funcGetCartErrorsInc = f
	return mmGetCartErrorsInc.mock
}

// GetCartErrorsInc implements Metrics
func (mmGetCartErrorsInc *MetricsMock) GetCartErrorsInc() {
	mm_atomic.AddUint64(&mmGetCartErrorsInc.beforeGetCartErrorsIncCounter, 1)
	defer mm_atomic.AddUint64(&mmGetCartErrorsInc.afterGetCartErrorsIncCounter, 1)

	if mmGetCartErrorsInc.inspectFuncGetCartErrorsInc != nil {
		mmGetCartErrorsInc.inspectFuncGetCartErrorsInc()
	}

	if mmGetCartErrorsInc.GetCartErrorsIncMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetCartErrorsInc.GetCartErrorsIncMock.defaultExpectation.Counter, 1)

		return

	}
	if mmGetCartErrorsInc.funcGetCartErrorsInc != nil {
		mmGetCartErrorsInc.funcGetCartErrorsInc()
		return
	}
	mmGetCartErrorsInc.t.Fatalf("Unexpected call to MetricsMock.GetCartErrorsInc.")

}

// GetCartErrorsIncAfterCounter returns a count of finished MetricsMock.GetCartErrorsInc invocations
func (mmGetCartErrorsInc *MetricsMock) GetCartErrorsIncAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetCartErrorsInc.afterGetCartErrorsIncCounter)
}

// GetCartErrorsIncBeforeCounter returns a count of MetricsMock.GetCartErrorsInc invocations
func (mmGetCartErrorsInc *MetricsMock) GetCartErrorsIncBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetCartErrorsInc.beforeGetCartErrorsIncCounter)
}

// MinimockGetCartErrorsIncDone returns true if the count of the GetCartErrorsInc invocations corresponds
// the number of defined expectations
func (m *MetricsMock) MinimockGetCartErrorsIncDone() bool {
	for _, e := range m.GetCartErrorsIncMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetCartErrorsIncMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetCartErrorsIncCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetCartErrorsInc != nil && mm_atomic.LoadUint64(&m.afterGetCartErrorsIncCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetCartErrorsIncInspect logs each unmet expectation
func (m *MetricsMock) MinimockGetCartErrorsIncInspect() {
	for _, e := range m.GetCartErrorsIncMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to MetricsMock.GetCartErrorsInc")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetCartErrorsIncMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetCartErrorsIncCounter) < 1 {
		m.t.Error("Expected call to MetricsMock.GetCartErrorsInc")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetCartErrorsInc != nil && mm_atomic.LoadUint64(&m.afterGetCartErrorsIncCounter) < 1 {
		m.t.Error("Expected call to MetricsMock.GetCartErrorsInc")
	}
}

type mMetricsMockGetCartInc struct {
	mock               *MetricsMock
	defaultExpectation *MetricsMockGetCartIncExpectation
	expectations       []*MetricsMockGetCartIncExpectation
}

// MetricsMockGetCartIncExpectation specifies expectation struct of the Metrics.GetCartInc
type MetricsMockGetCartIncExpectation struct {
	mock *MetricsMock

	Counter uint64
}

// Expect sets up expected params for Metrics.GetCartInc
func (mmGetCartInc *mMetricsMockGetCartInc) Expect() *mMetricsMockGetCartInc {
	if mmGetCartInc.mock.funcGetCartInc != nil {
		mmGetCartInc.mock.t.Fatalf("MetricsMock.GetCartInc mock is already set by Set")
	}

	if mmGetCartInc.defaultExpectation == nil {
		mmGetCartInc.defaultExpectation = &MetricsMockGetCartIncExpectation{}
	}

	return mmGetCartInc
}

// Inspect accepts an inspector function that has same arguments as the Metrics.GetCartInc
func (mmGetCartInc *mMetricsMockGetCartInc) Inspect(f func()) *mMetricsMockGetCartInc {
	if mmGetCartInc.mock.inspectFuncGetCartInc != nil {
		mmGetCartInc.mock.t.Fatalf("Inspect function is already set for MetricsMock.GetCartInc")
	}

	mmGetCartInc.mock.inspectFuncGetCartInc = f

	return mmGetCartInc
}

// Return sets up results that will be returned by Metrics.GetCartInc
func (mmGetCartInc *mMetricsMockGetCartInc) Return() *MetricsMock {
	if mmGetCartInc.mock.funcGetCartInc != nil {
		mmGetCartInc.mock.t.Fatalf("MetricsMock.GetCartInc mock is already set by Set")
	}

	if mmGetCartInc.defaultExpectation == nil {
		mmGetCartInc.defaultExpectation = &MetricsMockGetCartIncExpectation{mock: mmGetCartInc.mock}
	}

	return mmGetCartInc.mock
}

//Set uses given function f to mock the Metrics.GetCartInc method
func (mmGetCartInc *mMetricsMockGetCartInc) Set(f func()) *MetricsMock {
	if mmGetCartInc.defaultExpectation != nil {
		mmGetCartInc.mock.t.Fatalf("Default expectation is already set for the Metrics.GetCartInc method")
	}

	if len(mmGetCartInc.expectations) > 0 {
		mmGetCartInc.mock.t.Fatalf("Some expectations are already set for the Metrics.GetCartInc method")
	}

	mmGetCartInc.mock.funcGetCartInc = f
	return mmGetCartInc.mock
}

// GetCartInc implements Metrics
func (mmGetCartInc *MetricsMock) GetCartInc() {
	mm_atomic.AddUint64(&mmGetCartInc.beforeGetCartIncCounter, 1)
	defer mm_atomic.AddUint64(&mmGetCartInc.afterGetCartIncCounter, 1)

	if mmGetCartInc.inspectFuncGetCartInc != nil {
		mmGetCartInc.inspectFuncGetCartInc()
	}

	if mmGetCartInc.GetCartIncMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetCartInc.GetCartIncMock.defaultExpectation.Counter, 1)

		return

	}
	if mmGetCartInc.funcGetCartInc != nil {
		mmGetCartInc.funcGetCartInc()
		return
	}
	mmGetCartInc.t.Fatalf("Unexpected call to MetricsMock.GetCartInc.")

}

// GetCartIncAfterCounter returns a count of finished MetricsMock.GetCartInc invocations
func (mmGetCartInc *MetricsMock) GetCartIncAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetCartInc.afterGetCartIncCounter)
}

// GetCartIncBeforeCounter returns a count of MetricsMock.GetCartInc invocations
func (mmGetCartInc *MetricsMock) GetCartIncBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetCartInc.beforeGetCartIncCounter)
}

// MinimockGetCartIncDone returns true if the count of the GetCartInc invocations corresponds
// the number of defined expectations
func (m *MetricsMock) MinimockGetCartIncDone() bool {
	for _, e := range m.GetCartIncMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetCartIncMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetCartIncCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetCartInc != nil && mm_atomic.LoadUint64(&m.afterGetCartIncCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetCartIncInspect logs each unmet expectation
func (m *MetricsMock) MinimockGetCartIncInspect() {
	for _, e := range m.GetCartIncMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to MetricsMock.GetCartInc")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetCartIncMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetCartIncCounter) < 1 {
		m.t.Error("Expected call to MetricsMock.GetCartInc")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetCartInc != nil && mm_atomic.LoadUint64(&m.afterGetCartIncCounter) < 1 {
		m.t.Error("Expected call to MetricsMock.GetCartInc")
	}
}

type mMetricsMockGetProductErrorsInc struct {
	mock               *MetricsMock
	defaultExpectation *MetricsMockGetProductErrorsIncExpectation
	expectations       []*MetricsMockGetProductErrorsIncExpectation
}

// MetricsMockGetProductErrorsIncExpectation specifies expectation struct of the Metrics.GetProductErrorsInc
type MetricsMockGetProductErrorsIncExpectation struct {
	mock *MetricsMock

	Counter uint64
}

// Expect sets up expected params for Metrics.GetProductErrorsInc
func (mmGetProductErrorsInc *mMetricsMockGetProductErrorsInc) Expect() *mMetricsMockGetProductErrorsInc {
	if mmGetProductErrorsInc.mock.funcGetProductErrorsInc != nil {
		mmGetProductErrorsInc.mock.t.Fatalf("MetricsMock.GetProductErrorsInc mock is already set by Set")
	}

	if mmGetProductErrorsInc.defaultExpectation == nil {
		mmGetProductErrorsInc.defaultExpectation = &MetricsMockGetProductErrorsIncExpectation{}
	}

	return mmGetProductErrorsInc
}

// Inspect accepts an inspector function that has same arguments as the Metrics.GetProductErrorsInc
func (mmGetProductErrorsInc *mMetricsMockGetProductErrorsInc) Inspect(f func()) *mMetricsMockGetProductErrorsInc {
	if mmGetProductErrorsInc.mock.inspectFuncGetProductErrorsInc != nil {
		mmGetProductErrorsInc.mock.t.Fatalf("Inspect function is already set for MetricsMock.GetProductErrorsInc")
	}

	mmGetProductErrorsInc.mock.inspectFuncGetProductErrorsInc = f

	return mmGetProductErrorsInc
}

// Return sets up results that will be returned by Metrics.GetProductErrorsInc
func (mmGetProductErrorsInc *mMetricsMockGetProductErrorsInc) Return() *MetricsMock {
	if mmGetProductErrorsInc.mock.funcGetProductErrorsInc != nil {
		mmGetProductErrorsInc.mock.t.Fatalf("MetricsMock.GetProductErrorsInc mock is already set by Set")
	}

	if mmGetProductErrorsInc.defaultExpectation == nil {
		mmGetProductErrorsInc.defaultExpectation = &MetricsMockGetProductErrorsIncExpectation{mock: mmGetProductErrorsInc.mock}
	}

	return mmGetProductErrorsInc.mock
}

//Set uses given function f to mock the Metrics.GetProductErrorsInc method
func (mmGetProductErrorsInc *mMetricsMockGetProductErrorsInc) Set(f func()) *MetricsMock {
	if mmGetProductErrorsInc.defaultExpectation != nil {
		mmGetProductErrorsInc.mock.t.Fatalf("Default expectation is already set for the Metrics.GetProductErrorsInc method")
	}

	if len(mmGetProductErrorsInc.expectations) > 0 {
		mmGetProductErrorsInc.mock.t.Fatalf("Some expectations are already set for the Metrics.GetProductErrorsInc method")
	}

	mmGetProductErrorsInc.mock.funcGetProductErrorsInc = f
	return mmGetProductErrorsInc.mock
}

// GetProductErrorsInc implements Metrics
func (mmGetProductErrorsInc *MetricsMock) GetProductErrorsInc() {
	mm_atomic.AddUint64(&mmGetProductErrorsInc.beforeGetProductErrorsIncCounter, 1)
	defer mm_atomic.AddUint64(&mmGetProductErrorsInc.afterGetProductErrorsIncCounter, 1)

	if mmGetProductErrorsInc.inspectFuncGetProductErrorsInc != nil {
		mmGetProductErrorsInc.inspectFuncGetProductErrorsInc()
	}

	if mmGetProductErrorsInc.GetProductErrorsIncMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetProductErrorsInc.GetProductErrorsIncMock.defaultExpectation.Counter, 1)

		return

	}
	if mmGetProductErrorsInc.funcGetProductErrorsInc != nil {
		mmGetProductErrorsInc.funcGetProductErrorsInc()
		return
	}
	mmGetProductErrorsInc.t.Fatalf("Unexpected call to MetricsMock.GetProductErrorsInc.")

}

// GetProductErrorsIncAfterCounter returns a count of finished MetricsMock.GetProductErrorsInc invocations
func (mmGetProductErrorsInc *MetricsMock) GetProductErrorsIncAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetProductErrorsInc.afterGetProductErrorsIncCounter)
}

// GetProductErrorsIncBeforeCounter returns a count of MetricsMock.GetProductErrorsInc invocations
func (mmGetProductErrorsInc *MetricsMock) GetProductErrorsIncBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetProductErrorsInc.beforeGetProductErrorsIncCounter)
}

// MinimockGetProductErrorsIncDone returns true if the count of the GetProductErrorsInc invocations corresponds
// the number of defined expectations
func (m *MetricsMock) MinimockGetProductErrorsIncDone() bool {
	for _, e := range m.GetProductErrorsIncMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetProductErrorsIncMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetProductErrorsIncCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetProductErrorsInc != nil && mm_atomic.LoadUint64(&m.afterGetProductErrorsIncCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetProductErrorsIncInspect logs each unmet expectation
func (m *MetricsMock) MinimockGetProductErrorsIncInspect() {
	for _, e := range m.GetProductErrorsIncMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to MetricsMock.GetProductErrorsInc")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetProductErrorsIncMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetProductErrorsIncCounter) < 1 {
		m.t.Error("Expected call to MetricsMock.GetProductErrorsInc")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetProductErrorsInc != nil && mm_atomic.LoadUint64(&m.afterGetProductErrorsIncCounter) < 1 {
		m.t.Error("Expected call to MetricsMock.GetProductErrorsInc")
	}
}

type mMetricsMockGetProductInc struct {
	mock               *MetricsMock
	defaultExpectation *MetricsMockGetProductIncExpectation
	expectations       []*MetricsMockGetProductIncExpectation
}

// MetricsMockGetProductIncExpectation specifies expectation struct of the Metrics.GetProductInc
type MetricsMockGetProductIncExpectation struct {
	mock *MetricsMock

	Counter uint64
}

// Expect sets up expected params for Metrics.GetProductInc
func (mmGetProductInc *mMetricsMockGetProductInc) Expect() *mMetricsMockGetProductInc {
	if mmGetProductInc.mock.funcGetProductInc != nil {
		mmGetProductInc.mock.t.Fatalf("MetricsMock.GetProductInc mock is already set by Set")
	}

	if mmGetProductInc.defaultExpectation == nil {
		mmGetProductInc.defaultExpectation = &MetricsMockGetProductIncExpectation{}
	}

	return mmGetProductInc
}

// Inspect accepts an inspector function that has same arguments as the Metrics.GetProductInc
func (mmGetProductInc *mMetricsMockGetProductInc) Inspect(f func()) *mMetricsMockGetProductInc {
	if mmGetProductInc.mock.inspectFuncGetProductInc != nil {
		mmGetProductInc.mock.t.Fatalf("Inspect function is already set for MetricsMock.GetProductInc")
	}

	mmGetProductInc.mock.inspectFuncGetProductInc = f

	return mmGetProductInc
}

// Return sets up results that will be returned by Metrics.GetProductInc
func (mmGetProductInc *mMetricsMockGetProductInc) Return() *MetricsMock {
	if mmGetProductInc.mock.funcGetProductInc != nil {
		mmGetProductInc.mock.t.Fatalf("MetricsMock.GetProductInc mock is already set by Set")
	}

	if mmGetProductInc.defaultExpectation == nil {
		mmGetProductInc.defaultExpectation = &MetricsMockGetProductIncExpectation{mock: mmGetProductInc.mock}
	}

	return mmGetProductInc.mock
}

//Set uses given function f to mock the Metrics.GetProductInc method
func (mmGetProductInc *mMetricsMockGetProductInc) Set(f func()) *MetricsMock {
	if mmGetProductInc.defaultExpectation != nil {
		mmGetProductInc.mock.t.Fatalf("Default expectation is already set for the Metrics.GetProductInc method")
	}

	if len(mmGetProductInc.expectations) > 0 {
		mmGetProductInc.mock.t.Fatalf("Some expectations are already set for the Metrics.GetProductInc method")
	}

	mmGetProductInc.mock.funcGetProductInc = f
	return mmGetProductInc.mock
}

// GetProductInc implements Metrics
func (mmGetProductInc *MetricsMock) GetProductInc() {
	mm_atomic.AddUint64(&mmGetProductInc.beforeGetProductIncCounter, 1)
	defer mm_atomic.AddUint64(&mmGetProductInc.afterGetProductIncCounter, 1)

	if mmGetProductInc.inspectFuncGetProductInc != nil {
		mmGetProductInc.inspectFuncGetProductInc()
	}

	if mmGetProductInc.GetProductIncMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetProductInc.GetProductIncMock.defaultExpectation.Counter, 1)

		return

	}
	if mmGetProductInc.funcGetProductInc != nil {
		mmGetProductInc.funcGetProductInc()
		return
	}
	mmGetProductInc.t.Fatalf("Unexpected call to MetricsMock.GetProductInc.")

}

// GetProductIncAfterCounter returns a count of finished MetricsMock.GetProductInc invocations
func (mmGetProductInc *MetricsMock) GetProductIncAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetProductInc.afterGetProductIncCounter)
}

// GetProductIncBeforeCounter returns a count of MetricsMock.GetProductInc invocations
func (mmGetProductInc *MetricsMock) GetProductIncBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetProductInc.beforeGetProductIncCounter)
}

// MinimockGetProductIncDone returns true if the count of the GetProductInc invocations corresponds
// the number of defined expectations
func (m *MetricsMock) MinimockGetProductIncDone() bool {
	for _, e := range m.GetProductIncMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetProductIncMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetProductIncCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetProductInc != nil && mm_atomic.LoadUint64(&m.afterGetProductIncCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetProductIncInspect logs each unmet expectation
func (m *MetricsMock) MinimockGetProductIncInspect() {
	for _, e := range m.GetProductIncMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to MetricsMock.GetProductInc")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetProductIncMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetProductIncCounter) < 1 {
		m.t.Error("Expected call to MetricsMock.GetProductInc")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetProductInc != nil && mm_atomic.LoadUint64(&m.afterGetProductIncCounter) < 1 {
		m.t.Error("Expected call to MetricsMock.GetProductInc")
	}
}

type mMetricsMockGetReviewsErrorsInc struct {
	mock               *MetricsMock
	defaultExpectation *MetricsMockGetReviewsErrorsIncExpectation
	expectations       []*MetricsMockGetReviewsErrorsIncExpectation
}

// MetricsMockGetReviewsErrorsIncExpectation specifies expectation struct of the Metrics.GetReviewsErrorsInc
type MetricsMockGetReviewsErrorsIncExpectation struct {
	mock *MetricsMock

	Counter uint64
}

// Expect sets up expected params for Metrics.GetReviewsErrorsInc
func (mmGetReviewsErrorsInc *mMetricsMockGetReviewsErrorsInc) Expect() *mMetricsMockGetReviewsErrorsInc {
	if mmGetReviewsErrorsInc.mock.funcGetReviewsErrorsInc != nil {
		mmGetReviewsErrorsInc.mock.t.Fatalf("MetricsMock.GetReviewsErrorsInc mock is already set by Set")
	}

	if mmGetReviewsErrorsInc.defaultExpectation == nil {
		mmGetReviewsErrorsInc.defaultExpectation = &MetricsMockGetReviewsErrorsIncExpectation{}
	}

	return mmGetReviewsErrorsInc
}

// Inspect accepts an inspector function that has same arguments as the Metrics.GetReviewsErrorsInc
func (mmGetReviewsErrorsInc *mMetricsMockGetReviewsErrorsInc) Inspect(f func()) *mMetricsMockGetReviewsErrorsInc {
	if mmGetReviewsErrorsInc.mock.inspectFuncGetReviewsErrorsInc != nil {
		mmGetReviewsErrorsInc.mock.t.Fatalf("Inspect function is already set for MetricsMock.GetReviewsErrorsInc")
	}

	mmGetReviewsErrorsInc.mock.inspectFuncGetReviewsErrorsInc = f

	return mmGetReviewsErrorsInc
}

// Return sets up results that will be returned by Metrics.GetReviewsErrorsInc
func (mmGetReviewsErrorsInc *mMetricsMockGetReviewsErrorsInc) Return() *MetricsMock {
	if mmGetReviewsErrorsInc.mock.funcGetReviewsErrorsInc != nil {
		mmGetReviewsErrorsInc.mock.t.Fatalf("MetricsMock.GetReviewsErrorsInc mock is already set by Set")
	}

	if mmGetReviewsErrorsInc.defaultExpectation == nil {
		mmGetReviewsErrorsInc.defaultExpectation = &MetricsMockGetReviewsErrorsIncExpectation{mock: mmGetReviewsErrorsInc.mock}
	}

	return mmGetReviewsErrorsInc.mock
}

//Set uses given function f to mock the Metrics.GetReviewsErrorsInc method
func (mmGetReviewsErrorsInc *mMetricsMockGetReviewsErrorsInc) Set(f func()) *MetricsMock {
	if mmGetReviewsErrorsInc.defaultExpectation != nil {
		mmGetReviewsErrorsInc.mock.t.Fatalf("Default expectation is already set for the Metrics.GetReviewsErrorsInc method")
	}

	if len(mmGetReviewsErrorsInc.expectations) > 0 {
		mmGetReviewsErrorsInc.mock.t.Fatalf("Some expectations are already set for the Metrics.GetReviewsErrorsInc method")
	}

	mmGetReviewsErrorsInc.mock.funcGetReviewsErrorsInc = f
	return mmGetReviewsErrorsInc.mock
}

// GetReviewsErrorsInc implements Metrics
func (mmGetReviewsErrorsInc *MetricsMock) GetReviewsErrorsInc() {
	mm_atomic.AddUint64(&mmGetReviewsErrorsInc.beforeGetReviewsErrorsIncCounter, 1)
	defer mm_atomic.AddUint64(&mmGetReviewsErrorsInc.afterGetReviewsErrorsIncCounter, 1)

	if mmGetReviewsErrorsInc.inspectFuncGetReviewsErrorsInc != nil {
		mmGetReviewsErrorsInc.inspectFuncGetReviewsErrorsInc()
	}

	if mmGetReviewsErrorsInc.GetReviewsErrorsIncMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetReviewsErrorsInc.GetReviewsErrorsIncMock.defaultExpectation.Counter, 1)

		return

	}
	if mmGetReviewsErrorsInc.funcGetReviewsErrorsInc != nil {
		mmGetReviewsErrorsInc.funcGetReviewsErrorsInc()
		return
	}
	mmGetReviewsErrorsInc.t.Fatalf("Unexpected call to MetricsMock.GetReviewsErrorsInc.")

}

// GetReviewsErrorsIncAfterCounter returns a count of finished MetricsMock.GetReviewsErrorsInc invocations
func (mmGetReviewsErrorsInc *MetricsMock) GetReviewsErrorsIncAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetReviewsErrorsInc.afterGetReviewsErrorsIncCounter)
}

// GetReviewsErrorsIncBeforeCounter returns a count of MetricsMock.GetReviewsErrorsInc invocations
func (mmGetReviewsErrorsInc *MetricsMock) GetReviewsErrorsIncBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetReviewsErrorsInc.beforeGetReviewsErrorsIncCounter)
}

// MinimockGetReviewsErrorsIncDone returns true if the count of the GetReviewsErrorsInc invocations corresponds
// the number of defined expectations
func (m *MetricsMock) MinimockGetReviewsErrorsIncDone() bool {
	for _, e := range m.GetReviewsErrorsIncMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetReviewsErrorsIncMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetReviewsErrorsIncCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetReviewsErrorsInc != nil && mm_atomic.LoadUint64(&m.afterGetReviewsErrorsIncCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetReviewsErrorsIncInspect logs each unmet expectation
func (m *MetricsMock) MinimockGetReviewsErrorsIncInspect() {
	for _, e := range m.GetReviewsErrorsIncMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to MetricsMock.GetReviewsErrorsInc")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetReviewsErrorsIncMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetReviewsErrorsIncCounter) < 1 {
		m.t.Error("Expected call to MetricsMock.GetReviewsErrorsInc")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetReviewsErrorsInc != nil && mm_atomic.LoadUint64(&m.afterGetReviewsErrorsIncCounter) < 1 {
		m.t.Error("Expected call to MetricsMock.GetReviewsErrorsInc")
	}
}

type mMetricsMockGetReviewsInc struct {
	mock               *MetricsMock
	defaultExpectation *MetricsMockGetReviewsIncExpectation
	expectations       []*MetricsMockGetReviewsIncExpectation
}

// MetricsMockGetReviewsIncExpectation specifies expectation struct of the Metrics.GetReviewsInc
type MetricsMockGetReviewsIncExpectation struct {
	mock *MetricsMock

	Counter uint64
}

// Expect sets up expected params for Metrics.GetReviewsInc
func (mmGetReviewsInc *mMetricsMockGetReviewsInc) Expect() *mMetricsMockGetReviewsInc {
	if mmGetReviewsInc.mock.funcGetReviewsInc != nil {
		mmGetReviewsInc.mock.t.Fatalf("MetricsMock.GetReviewsInc mock is already set by Set")
	}

	if mmGetReviewsInc.defaultExpectation == nil {
		mmGetReviewsInc.defaultExpectation = &MetricsMockGetReviewsIncExpectation{}
	}

	return mmGetReviewsInc
}

// Inspect accepts an inspector function that has same arguments as the Metrics.GetReviewsInc
func (mmGetReviewsInc *mMetricsMockGetReviewsInc) Inspect(f func()) *mMetricsMockGetReviewsInc {
	if mmGetReviewsInc.mock.inspectFuncGetReviewsInc != nil {
		mmGetReviewsInc.mock.t.Fatalf("Inspect function is already set for MetricsMock.GetReviewsInc")
	}

	mmGetReviewsInc.mock.inspectFuncGetReviewsInc = f

	return mmGetReviewsInc
}

// Return sets up results that will be returned by Metrics.GetReviewsInc
func (mmGetReviewsInc *mMetricsMockGetReviewsInc) Return() *MetricsMock {
	if mmGetReviewsInc.mock.funcGetReviewsInc != nil {
		mmGetReviewsInc.mock.t.Fatalf("MetricsMock.GetReviewsInc mock is already set by Set")
	}

	if mmGetReviewsInc.defaultExpectation == nil {
		mmGetReviewsInc.defaultExpectation = &MetricsMockGetReviewsIncExpectation{mock: mmGetReviewsInc.mock}
	}

	return mmGetReviewsInc.mock
}

//Set uses given function f to mock the Metrics.GetReviewsInc method
func (mmGetReviewsInc *mMetricsMockGetReviewsInc) Set(f func()) *MetricsMock {
	if mmGetReviewsInc.defaultExpectation != nil {
		mmGetReviewsInc.mock.t.Fatalf("Default expectation is already set for the Metrics.GetReviewsInc method")
	}

	if len(mmGetReviewsInc.expectations) > 0 {
		mmGetReviewsInc.mock.t.Fatalf("Some expectations are already set for the Metrics.GetReviewsInc method")
	}

	mmGetReviewsInc.mock.funcGetReviewsInc = f
	return mmGetReviewsInc.mock
}

// GetReviewsInc implements Metrics
func (mmGetReviewsInc *MetricsMock) GetReviewsInc() {
	mm_atomic.AddUint64(&mmGetReviewsInc.beforeGetReviewsIncCounter, 1)
	defer mm_atomic.AddUint64(&mmGetReviewsInc.afterGetReviewsIncCounter, 1)

	if mmGetReviewsInc.inspectFuncGetReviewsInc != nil {
		mmGetReviewsInc.inspectFuncGetReviewsInc()
	}

	if mmGetReviewsInc.GetReviewsIncMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetReviewsInc.GetReviewsIncMock.defaultExpectation.Counter, 1)

		return

	}
	if mmGetReviewsInc.funcGetReviewsInc != nil {
		mmGetReviewsInc.funcGetReviewsInc()
		return
	}
	mmGetReviewsInc.t.Fatalf("Unexpected call to MetricsMock.GetReviewsInc.")

}

// GetReviewsIncAfterCounter returns a count of finished MetricsMock.GetReviewsInc invocations
func (mmGetReviewsInc *MetricsMock) GetReviewsIncAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetReviewsInc.afterGetReviewsIncCounter)
}

// GetReviewsIncBeforeCounter returns a count of MetricsMock.GetReviewsInc invocations
func (mmGetReviewsInc *MetricsMock) GetReviewsIncBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetReviewsInc.beforeGetReviewsIncCounter)
}

// MinimockGetReviewsIncDone returns true if the count of the GetReviewsInc invocations corresponds
// the number of defined expectations
func (m *MetricsMock) MinimockGetReviewsIncDone() bool {
	for _, e := range m.GetReviewsIncMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetReviewsIncMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetReviewsIncCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetReviewsInc != nil && mm_atomic.LoadUint64(&m.afterGetReviewsIncCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetReviewsIncInspect logs each unmet expectation
func (m *MetricsMock) MinimockGetReviewsIncInspect() {
	for _, e := range m.GetReviewsIncMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to MetricsMock.GetReviewsInc")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetReviewsIncMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetReviewsIncCounter) < 1 {
		m.t.Error("Expected call to MetricsMock.GetReviewsInc")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetReviewsInc != nil && mm_atomic.LoadUint64(&m.afterGetReviewsIncCounter) < 1 {
		m.t.Error("Expected call to MetricsMock.GetReviewsInc")
	}
}

type mMetricsMockRequestErrorsInc struct {
	mock               *MetricsMock
	defaultExpectation *MetricsMockRequestErrorsIncExpectation
	expectations       []*MetricsMockRequestErrorsIncExpectation
}

// MetricsMockRequestErrorsIncExpectation specifies expectation struct of the Metrics.RequestErrorsInc
type MetricsMockRequestErrorsIncExpectation struct {
	mock *MetricsMock

	Counter uint64
}

// Expect sets up expected params for Metrics.RequestErrorsInc
func (mmRequestErrorsInc *mMetricsMockRequestErrorsInc) Expect() *mMetricsMockRequestErrorsInc {
	if mmRequestErrorsInc.mock.funcRequestErrorsInc != nil {
		mmRequestErrorsInc.mock.t.Fatalf("MetricsMock.RequestErrorsInc mock is already set by Set")
	}

	if mmRequestErrorsInc.defaultExpectation == nil {
		mmRequestErrorsInc.defaultExpectation = &MetricsMockRequestErrorsIncExpectation{}
	}

	return mmRequestErrorsInc
}

// Inspect accepts an inspector function that has same arguments as the Metrics.RequestErrorsInc
func (mmRequestErrorsInc *mMetricsMockRequestErrorsInc) Inspect(f func()) *mMetricsMockRequestErrorsInc {
	if mmRequestErrorsInc.mock.inspectFuncRequestErrorsInc != nil {
		mmRequestErrorsInc.mock.t.Fatalf("Inspect function is already set for MetricsMock.RequestErrorsInc")
	}

	mmRequestErrorsInc.mock.inspectFuncRequestErrorsInc = f

	return mmRequestErrorsInc
}

// Return sets up results that will be returned by Metrics.RequestErrorsInc
func (mmRequestErrorsInc *mMetricsMockRequestErrorsInc) Return() *MetricsMock {
	if mmRequestErrorsInc.mock.funcRequestErrorsInc != nil {
		mmRequestErrorsInc.mock.t.Fatalf("MetricsMock.RequestErrorsInc mock is already set by Set")
	}

	if mmRequestErrorsInc.defaultExpectation == nil {
		mmRequestErrorsInc.defaultExpectation = &MetricsMockRequestErrorsIncExpectation{mock: mmRequestErrorsInc.mock}
	}

	return mmRequestErrorsInc.mock
}

//Set uses given function f to mock the Metrics.RequestErrorsInc method
func (mmRequestErrorsInc *mMetricsMockRequestErrorsInc) Set(f func()) *MetricsMock {
	if mmRequestErrorsInc.defaultExpectation != nil {
		mmRequestErrorsInc.mock.t.Fatalf("Default expectation is already set for the Metrics.RequestErrorsInc method")
	}

	if len(mmRequestErrorsInc.expectations) > 0 {
		mmRequestErrorsInc.mock.t.Fatalf("Some expectations are already set for the Metrics.RequestErrorsInc method")
	}

	mmRequestErrorsInc.mock.funcRequestErrorsInc = f
	return mmRequestErrorsInc.mock
}

// RequestErrorsInc implements Metrics
func (mmRequestErrorsInc *MetricsMock) RequestErrorsInc() {
	mm_atomic.AddUint64(&mmRequestErrorsInc.beforeRequestErrorsIncCounter, 1)
	defer mm_atomic.AddUint64(&mmRequestErrorsInc.afterRequestErrorsIncCounter, 1)

	if mmRequestErrorsInc.inspectFuncRequestErrorsInc != nil {
		mmRequestErrorsInc.inspectFuncRequestErrorsInc()
	}

	if mmRequestErrorsInc.RequestErrorsIncMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmRequestErrorsInc.RequestErrorsIncMock.defaultExpectation.Counter, 1)

		return

	}
	if mmRequestErrorsInc.funcRequestErrorsInc != nil {
		mmRequestErrorsInc.funcRequestErrorsInc()
		return
	}
	mmRequestErrorsInc.t.Fatalf("Unexpected call to MetricsMock.RequestErrorsInc.")

}

// RequestErrorsIncAfterCounter returns a count of finished MetricsMock.RequestErrorsInc invocations
func (mmRequestErrorsInc *MetricsMock) RequestErrorsIncAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmRequestErrorsInc.afterRequestErrorsIncCounter)
}

// RequestErrorsIncBeforeCounter returns a count of MetricsMock.RequestErrorsInc invocations
func (mmRequestErrorsInc *MetricsMock) RequestErrorsIncBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmRequestErrorsInc.beforeRequestErrorsIncCounter)
}

// MinimockRequestErrorsIncDone returns true if the count of the RequestErrorsInc invocations corresponds
// the number of defined expectations
func (m *MetricsMock) MinimockRequestErrorsIncDone() bool {
	for _, e := range m.RequestErrorsIncMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.RequestErrorsIncMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterRequestErrorsIncCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcRequestErrorsInc != nil && mm_atomic.LoadUint64(&m.afterRequestErrorsIncCounter) < 1 {
		return false
	}
	return true
}

// MinimockRequestErrorsIncInspect logs each unmet expectation
func (m *MetricsMock) MinimockRequestErrorsIncInspect() {
	for _, e := range m.RequestErrorsIncMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to MetricsMock.RequestErrorsInc")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.RequestErrorsIncMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterRequestErrorsIncCounter) < 1 {
		m.t.Error("Expected call to MetricsMock.RequestErrorsInc")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcRequestErrorsInc != nil && mm_atomic.LoadUint64(&m.afterRequestErrorsIncCounter) < 1 {
		m.t.Error("Expected call to MetricsMock.RequestErrorsInc")
	}
}

type mMetricsMockRequestsInc struct {
	mock               *MetricsMock
	defaultExpectation *MetricsMockRequestsIncExpectation
	expectations       []*MetricsMockRequestsIncExpectation
}

// MetricsMockRequestsIncExpectation specifies expectation struct of the Metrics.RequestsInc
type MetricsMockRequestsIncExpectation struct {
	mock *MetricsMock

	Counter uint64
}

// Expect sets up expected params for Metrics.RequestsInc
func (mmRequestsInc *mMetricsMockRequestsInc) Expect() *mMetricsMockRequestsInc {
	if mmRequestsInc.mock.funcRequestsInc != nil {
		mmRequestsInc.mock.t.Fatalf("MetricsMock.RequestsInc mock is already set by Set")
	}

	if mmRequestsInc.defaultExpectation == nil {
		mmRequestsInc.defaultExpectation = &MetricsMockRequestsIncExpectation{}
	}

	return mmRequestsInc
}

// Inspect accepts an inspector function that has same arguments as the Metrics.RequestsInc
func (mmRequestsInc *mMetricsMockRequestsInc) Inspect(f func()) *mMetricsMockRequestsInc {
	if mmRequestsInc.mock.inspectFuncRequestsInc != nil {
		mmRequestsInc.mock.t.Fatalf("Inspect function is already set for MetricsMock.RequestsInc")
	}

	mmRequestsInc.mock.inspectFuncRequestsInc = f

	return mmRequestsInc
}

// Return sets up results that will be returned by Metrics.RequestsInc
func (mmRequestsInc *mMetricsMockRequestsInc) Return() *MetricsMock {
	if mmRequestsInc.mock.funcRequestsInc != nil {
		mmRequestsInc.mock.t.Fatalf("MetricsMock.RequestsInc mock is already set by Set")
	}

	if mmRequestsInc.defaultExpectation == nil {
		mmRequestsInc.defaultExpectation = &MetricsMockRequestsIncExpectation{mock: mmRequestsInc.mock}
	}

	return mmRequestsInc.mock
}

//Set uses given function f to mock the Metrics.RequestsInc method
func (mmRequestsInc *mMetricsMockRequestsInc) Set(f func()) *MetricsMock {
	if mmRequestsInc.defaultExpectation != nil {
		mmRequestsInc.mock.t.Fatalf("Default expectation is already set for the Metrics.RequestsInc method")
	}

	if len(mmRequestsInc.expectations) > 0 {
		mmRequestsInc.mock.t.Fatalf("Some expectations are already set for the Metrics.RequestsInc method")
	}

	mmRequestsInc.mock.funcRequestsInc = f
	return mmRequestsInc.mock
}

// RequestsInc implements Metrics
func (mmRequestsInc *MetricsMock) RequestsInc() {
	mm_atomic.AddUint64(&mmRequestsInc.beforeRequestsIncCounter, 1)
	defer mm_atomic.AddUint64(&mmRequestsInc.afterRequestsIncCounter, 1)

	if mmRequestsInc.inspectFuncRequestsInc != nil {
		mmRequestsInc.inspectFuncRequestsInc()
	}

	if mmRequestsInc.RequestsIncMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmRequestsInc.RequestsIncMock.defaultExpectation.Counter, 1)

		return

	}
	if mmRequestsInc.funcRequestsInc != nil {
		mmRequestsInc.funcRequestsInc()
		return
	}
	mmRequestsInc.t.Fatalf("Unexpected call to MetricsMock.RequestsInc.")

}

// RequestsIncAfterCounter returns a count of finished MetricsMock.RequestsInc invocations
func (mmRequestsInc *MetricsMock) RequestsIncAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmRequestsInc.afterRequestsIncCounter)
}

// RequestsIncBeforeCounter returns a count of MetricsMock.RequestsInc invocations
func (mmRequestsInc *MetricsMock) RequestsIncBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmRequestsInc.beforeRequestsIncCounter)
}

// MinimockRequestsIncDone returns true if the count of the RequestsInc invocations corresponds
// the number of defined expectations
func (m *MetricsMock) MinimockRequestsIncDone() bool {
	for _, e := range m.RequestsIncMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.RequestsIncMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterRequestsIncCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcRequestsInc != nil && mm_atomic.LoadUint64(&m.afterRequestsIncCounter) < 1 {
		return false
	}
	return true
}

// MinimockRequestsIncInspect logs each unmet expectation
func (m *MetricsMock) MinimockRequestsIncInspect() {
	for _, e := range m.RequestsIncMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to MetricsMock.RequestsInc")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.RequestsIncMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterRequestsIncCounter) < 1 {
		m.t.Error("Expected call to MetricsMock.RequestsInc")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcRequestsInc != nil && mm_atomic.LoadUint64(&m.afterRequestsIncCounter) < 1 {
		m.t.Error("Expected call to MetricsMock.RequestsInc")
	}
}

type mMetricsMockUpdateCartErrorsInc struct {
	mock               *MetricsMock
	defaultExpectation *MetricsMockUpdateCartErrorsIncExpectation
	expectations       []*MetricsMockUpdateCartErrorsIncExpectation
}

// MetricsMockUpdateCartErrorsIncExpectation specifies expectation struct of the Metrics.UpdateCartErrorsInc
type MetricsMockUpdateCartErrorsIncExpectation struct {
	mock *MetricsMock

	Counter uint64
}

// Expect sets up expected params for Metrics.UpdateCartErrorsInc
func (mmUpdateCartErrorsInc *mMetricsMockUpdateCartErrorsInc) Expect() *mMetricsMockUpdateCartErrorsInc {
	if mmUpdateCartErrorsInc.mock.funcUpdateCartErrorsInc != nil {
		mmUpdateCartErrorsInc.mock.t.Fatalf("MetricsMock.UpdateCartErrorsInc mock is already set by Set")
	}

	if mmUpdateCartErrorsInc.defaultExpectation == nil {
		mmUpdateCartErrorsInc.defaultExpectation = &MetricsMockUpdateCartErrorsIncExpectation{}
	}

	return mmUpdateCartErrorsInc
}

// Inspect accepts an inspector function that has same arguments as the Metrics.UpdateCartErrorsInc
func (mmUpdateCartErrorsInc *mMetricsMockUpdateCartErrorsInc) Inspect(f func()) *mMetricsMockUpdateCartErrorsInc {
	if mmUpdateCartErrorsInc.mock.inspectFuncUpdateCartErrorsInc != nil {
		mmUpdateCartErrorsInc.mock.t.Fatalf("Inspect function is already set for MetricsMock.UpdateCartErrorsInc")
	}

	mmUpdateCartErrorsInc.mock.inspectFuncUpdateCartErrorsInc = f

	return mmUpdateCartErrorsInc
}

// Return sets up results that will be returned by Metrics.UpdateCartErrorsInc
func (mmUpdateCartErrorsInc *mMetricsMockUpdateCartErrorsInc) Return() *MetricsMock {
	if mmUpdateCartErrorsInc.mock.funcUpdateCartErrorsInc != nil {
		mmUpdateCartErrorsInc.mock.t.Fatalf("MetricsMock.UpdateCartErrorsInc mock is already set by Set")
	}

	if mmUpdateCartErrorsInc.defaultExpectation == nil {
		mmUpdateCartErrorsInc.defaultExpectation = &MetricsMockUpdateCartErrorsIncExpectation{mock: mmUpdateCartErrorsInc.mock}
	}

	return mmUpdateCartErrorsInc.mock
}

//Set uses given function f to mock the Metrics.UpdateCartErrorsInc method
func (mmUpdateCartErrorsInc *mMetricsMockUpdateCartErrorsInc) Set(f func()) *MetricsMock {
	if mmUpdateCartErrorsInc.defaultExpectation != nil {
		mmUpdateCartErrorsInc.mock.t.Fatalf("Default expectation is already set for the Metrics.UpdateCartErrorsInc method")
	}

	if len(mmUpdateCartErrorsInc.expectations) > 0 {
		mmUpdateCartErrorsInc.mock.t.Fatalf("Some expectations are already set for the Metrics.UpdateCartErrorsInc method")
	}

	mmUpdateCartErrorsInc.mock.funcUpdateCartErrorsInc = f
	return mmUpdateCartErrorsInc.mock
}

// UpdateCartErrorsInc implements Metrics
func (mmUpdateCartErrorsInc *MetricsMock) UpdateCartErrorsInc() {
	mm_atomic.AddUint64(&mmUpdateCartErrorsInc.beforeUpdateCartErrorsIncCounter, 1)
	defer mm_atomic.AddUint64(&mmUpdateCartErrorsInc.afterUpdateCartErrorsIncCounter, 1)

	if mmUpdateCartErrorsInc.inspectFuncUpdateCartErrorsInc != nil {
		mmUpdateCartErrorsInc.inspectFuncUpdateCartErrorsInc()
	}

	if mmUpdateCartErrorsInc.UpdateCartErrorsIncMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmUpdateCartErrorsInc.UpdateCartErrorsIncMock.defaultExpectation.Counter, 1)

		return

	}
	if mmUpdateCartErrorsInc.funcUpdateCartErrorsInc != nil {
		mmUpdateCartErrorsInc.funcUpdateCartErrorsInc()
		return
	}
	mmUpdateCartErrorsInc.t.Fatalf("Unexpected call to MetricsMock.UpdateCartErrorsInc.")

}

// UpdateCartErrorsIncAfterCounter returns a count of finished MetricsMock.UpdateCartErrorsInc invocations
func (mmUpdateCartErrorsInc *MetricsMock) UpdateCartErrorsIncAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUpdateCartErrorsInc.afterUpdateCartErrorsIncCounter)
}

// UpdateCartErrorsIncBeforeCounter returns a count of MetricsMock.UpdateCartErrorsInc invocations
func (mmUpdateCartErrorsInc *MetricsMock) UpdateCartErrorsIncBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUpdateCartErrorsInc.beforeUpdateCartErrorsIncCounter)
}

// MinimockUpdateCartErrorsIncDone returns true if the count of the UpdateCartErrorsInc invocations corresponds
// the number of defined expectations
func (m *MetricsMock) MinimockUpdateCartErrorsIncDone() bool {
	for _, e := range m.UpdateCartErrorsIncMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.UpdateCartErrorsIncMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterUpdateCartErrorsIncCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcUpdateCartErrorsInc != nil && mm_atomic.LoadUint64(&m.afterUpdateCartErrorsIncCounter) < 1 {
		return false
	}
	return true
}

// MinimockUpdateCartErrorsIncInspect logs each unmet expectation
func (m *MetricsMock) MinimockUpdateCartErrorsIncInspect() {
	for _, e := range m.UpdateCartErrorsIncMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to MetricsMock.UpdateCartErrorsInc")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.UpdateCartErrorsIncMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterUpdateCartErrorsIncCounter) < 1 {
		m.t.Error("Expected call to MetricsMock.UpdateCartErrorsInc")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcUpdateCartErrorsInc != nil && mm_atomic.LoadUint64(&m.afterUpdateCartErrorsIncCounter) < 1 {
		m.t.Error("Expected call to MetricsMock.UpdateCartErrorsInc")
	}
}

type mMetricsMockUpdateCartInc struct {
	mock               *MetricsMock
	defaultExpectation *MetricsMockUpdateCartIncExpectation
	expectations       []*MetricsMockUpdateCartIncExpectation
}

// MetricsMockUpdateCartIncExpectation specifies expectation struct of the Metrics.UpdateCartInc
type MetricsMockUpdateCartIncExpectation struct {
	mock *MetricsMock

	Counter uint64
}

// Expect sets up expected params for Metrics.UpdateCartInc
func (mmUpdateCartInc *mMetricsMockUpdateCartInc) Expect() *mMetricsMockUpdateCartInc {
	if mmUpdateCartInc.mock.funcUpdateCartInc != nil {
		mmUpdateCartInc.mock.t.Fatalf("MetricsMock.UpdateCartInc mock is already set by Set")
	}

	if mmUpdateCartInc.defaultExpectation == nil {
		mmUpdateCartInc.defaultExpectation = &MetricsMockUpdateCartIncExpectation{}
	}

	return mmUpdateCartInc
}

// Inspect accepts an inspector function that has same arguments as the Metrics.UpdateCartInc
func (mmUpdateCartInc *mMetricsMockUpdateCartInc) Inspect(f func()) *mMetricsMockUpdateCartInc {
	if mmUpdateCartInc.mock.inspectFuncUpdateCartInc != nil {
		mmUpdateCartInc.mock.t.Fatalf("Inspect function is already set for MetricsMock.UpdateCartInc")
	}

	mmUpdateCartInc.mock.inspectFuncUpdateCartInc = f

	return mmUpdateCartInc
}

// Return sets up results that will be returned by Metrics.UpdateCartInc
func (mmUpdateCartInc *mMetricsMockUpdateCartInc) Return() *MetricsMock {
	if mmUpdateCartInc.mock.funcUpdateCartInc != nil {
		mmUpdateCartInc.mock.t.Fatalf("MetricsMock.UpdateCartInc mock is already set by Set")
	}

	if mmUpdateCartInc.defaultExpectation == nil {
		mmUpdateCartInc.defaultExpectation = &MetricsMockUpdateCartIncExpectation{mock: mmUpdateCartInc.mock}
	}

	return mmUpdateCartInc.mock
}

//Set uses given function f to mock the Metrics.UpdateCartInc method
func (mmUpdateCartInc *mMetricsMockUpdateCartInc) Set(f func()) *MetricsMock {
	if mmUpdateCartInc.defaultExpectation != nil {
		mmUpdateCartInc.mock.t.Fatalf("Default expectation is already set for the Metrics.UpdateCartInc method")
	}

	if len(mmUpdateCartInc.expectations) > 0 {
		mmUpdateCartInc.mock.t.Fatalf("Some expectations are already set for the Metrics.UpdateCartInc method")
	}

	mmUpdateCartInc.mock.funcUpdateCartInc = f
	return mmUpdateCartInc.mock
}

// UpdateCartInc implements Metrics
func (mmUpdateCartInc *MetricsMock) UpdateCartInc() {
	mm_atomic.AddUint64(&mmUpdateCartInc.beforeUpdateCartIncCounter, 1)
	defer mm_atomic.AddUint64(&mmUpdateCartInc.afterUpdateCartIncCounter, 1)

	if mmUpdateCartInc.inspectFuncUpdateCartInc != nil {
		mmUpdateCartInc.inspectFuncUpdateCartInc()
	}

	if mmUpdateCartInc.UpdateCartIncMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmUpdateCartInc.UpdateCartIncMock.defaultExpectation.Counter, 1)

		return

	}
	if mmUpdateCartInc.funcUpdateCartInc != nil {
		mmUpdateCartInc.funcUpdateCartInc()
		return
	}
	mmUpdateCartInc.t.Fatalf("Unexpected call to MetricsMock.UpdateCartInc.")

}

// UpdateCartIncAfterCounter returns a count of finished MetricsMock.UpdateCartInc invocations
func (mmUpdateCartInc *MetricsMock) UpdateCartIncAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUpdateCartInc.afterUpdateCartIncCounter)
}

// UpdateCartIncBeforeCounter returns a count of MetricsMock.UpdateCartInc invocations
func (mmUpdateCartInc *MetricsMock) UpdateCartIncBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUpdateCartInc.beforeUpdateCartIncCounter)
}

// MinimockUpdateCartIncDone returns true if the count of the UpdateCartInc invocations corresponds
// the number of defined expectations
func (m *MetricsMock) MinimockUpdateCartIncDone() bool {
	for _, e := range m.UpdateCartIncMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.UpdateCartIncMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterUpdateCartIncCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcUpdateCartInc != nil && mm_atomic.LoadUint64(&m.afterUpdateCartIncCounter) < 1 {
		return false
	}
	return true
}

// MinimockUpdateCartIncInspect logs each unmet expectation
func (m *MetricsMock) MinimockUpdateCartIncInspect() {
	for _, e := range m.UpdateCartIncMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to MetricsMock.UpdateCartInc")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.UpdateCartIncMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterUpdateCartIncCounter) < 1 {
		m.t.Error("Expected call to MetricsMock.UpdateCartInc")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcUpdateCartInc != nil && mm_atomic.LoadUint64(&m.afterUpdateCartIncCounter) < 1 {
		m.t.Error("Expected call to MetricsMock.UpdateCartInc")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *MetricsMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockAddReviewErrorsIncInspect()

		m.MinimockAddReviewIncInspect()

		m.MinimockCreateProductErrorsIncInspect()

		m.MinimockCreateProductIncInspect()

		m.MinimockGetCartErrorsIncInspect()

		m.MinimockGetCartIncInspect()

		m.MinimockGetProductErrorsIncInspect()

		m.MinimockGetProductIncInspect()

		m.MinimockGetReviewsErrorsIncInspect()

		m.MinimockGetReviewsIncInspect()

		m.MinimockRequestErrorsIncInspect()

		m.MinimockRequestsIncInspect()

		m.MinimockUpdateCartErrorsIncInspect()

		m.MinimockUpdateCartIncInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *MetricsMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *MetricsMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockAddReviewErrorsIncDone() &&
		m.MinimockAddReviewIncDone() &&
		m.MinimockCreateProductErrorsIncDone() &&
		m.MinimockCreateProductIncDone() &&
		m.MinimockGetCartErrorsIncDone() &&
		m.MinimockGetCartIncDone() &&
		m.MinimockGetProductErrorsIncDone() &&
		m.MinimockGetProductIncDone() &&
		m.MinimockGetReviewsErrorsIncDone() &&
		m.MinimockGetReviewsIncDone() &&
		m.MinimockRequestErrorsIncDone() &&
		m.MinimockRequestsIncDone() &&
		m.MinimockUpdateCartErrorsIncDone() &&
		m.MinimockUpdateCartIncDone()
}
