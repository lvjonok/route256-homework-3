package service

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

//go:generate minimock -i gitlab.ozon.dev/lvjonok/homework-3/internal/service-orders/service.Metrics -o ./metrics_mock.go -n MetricsMock

import (
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// MetricsMock implements Metrics
type MetricsMock struct {
	t minimock.Tester

	funcCheckStatusErrorsInc          func()
	inspectFuncCheckStatusErrorsInc   func()
	afterCheckStatusErrorsIncCounter  uint64
	beforeCheckStatusErrorsIncCounter uint64
	CheckStatusErrorsIncMock          mMetricsMockCheckStatusErrorsInc

	funcCheckStatusInc          func()
	inspectFuncCheckStatusInc   func()
	afterCheckStatusIncCounter  uint64
	beforeCheckStatusIncCounter uint64
	CheckStatusIncMock          mMetricsMockCheckStatusInc

	funcCreateOrderErrorsInc          func()
	inspectFuncCreateOrderErrorsInc   func()
	afterCreateOrderErrorsIncCounter  uint64
	beforeCreateOrderErrorsIncCounter uint64
	CreateOrderErrorsIncMock          mMetricsMockCreateOrderErrorsInc

	funcCreateOrderInc          func()
	inspectFuncCreateOrderInc   func()
	afterCreateOrderIncCounter  uint64
	beforeCreateOrderIncCounter uint64
	CreateOrderIncMock          mMetricsMockCreateOrderInc

	funcRequestErrorsInc          func()
	inspectFuncRequestErrorsInc   func()
	afterRequestErrorsIncCounter  uint64
	beforeRequestErrorsIncCounter uint64
	RequestErrorsIncMock          mMetricsMockRequestErrorsInc

	funcRequestsInc          func()
	inspectFuncRequestsInc   func()
	afterRequestsIncCounter  uint64
	beforeRequestsIncCounter uint64
	RequestsIncMock          mMetricsMockRequestsInc

	funcUpdateStatusErrorsInc          func()
	inspectFuncUpdateStatusErrorsInc   func()
	afterUpdateStatusErrorsIncCounter  uint64
	beforeUpdateStatusErrorsIncCounter uint64
	UpdateStatusErrorsIncMock          mMetricsMockUpdateStatusErrorsInc

	funcUpdateStatusInc          func()
	inspectFuncUpdateStatusInc   func()
	afterUpdateStatusIncCounter  uint64
	beforeUpdateStatusIncCounter uint64
	UpdateStatusIncMock          mMetricsMockUpdateStatusInc
}

// NewMetricsMock returns a mock for Metrics
func NewMetricsMock(t minimock.Tester) *MetricsMock {
	m := &MetricsMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.CheckStatusErrorsIncMock = mMetricsMockCheckStatusErrorsInc{mock: m}

	m.CheckStatusIncMock = mMetricsMockCheckStatusInc{mock: m}

	m.CreateOrderErrorsIncMock = mMetricsMockCreateOrderErrorsInc{mock: m}

	m.CreateOrderIncMock = mMetricsMockCreateOrderInc{mock: m}

	m.RequestErrorsIncMock = mMetricsMockRequestErrorsInc{mock: m}

	m.RequestsIncMock = mMetricsMockRequestsInc{mock: m}

	m.UpdateStatusErrorsIncMock = mMetricsMockUpdateStatusErrorsInc{mock: m}

	m.UpdateStatusIncMock = mMetricsMockUpdateStatusInc{mock: m}

	return m
}

type mMetricsMockCheckStatusErrorsInc struct {
	mock               *MetricsMock
	defaultExpectation *MetricsMockCheckStatusErrorsIncExpectation
	expectations       []*MetricsMockCheckStatusErrorsIncExpectation
}

// MetricsMockCheckStatusErrorsIncExpectation specifies expectation struct of the Metrics.CheckStatusErrorsInc
type MetricsMockCheckStatusErrorsIncExpectation struct {
	mock *MetricsMock

	Counter uint64
}

// Expect sets up expected params for Metrics.CheckStatusErrorsInc
func (mmCheckStatusErrorsInc *mMetricsMockCheckStatusErrorsInc) Expect() *mMetricsMockCheckStatusErrorsInc {
	if mmCheckStatusErrorsInc.mock.funcCheckStatusErrorsInc != nil {
		mmCheckStatusErrorsInc.mock.t.Fatalf("MetricsMock.CheckStatusErrorsInc mock is already set by Set")
	}

	if mmCheckStatusErrorsInc.defaultExpectation == nil {
		mmCheckStatusErrorsInc.defaultExpectation = &MetricsMockCheckStatusErrorsIncExpectation{}
	}

	return mmCheckStatusErrorsInc
}

// Inspect accepts an inspector function that has same arguments as the Metrics.CheckStatusErrorsInc
func (mmCheckStatusErrorsInc *mMetricsMockCheckStatusErrorsInc) Inspect(f func()) *mMetricsMockCheckStatusErrorsInc {
	if mmCheckStatusErrorsInc.mock.inspectFuncCheckStatusErrorsInc != nil {
		mmCheckStatusErrorsInc.mock.t.Fatalf("Inspect function is already set for MetricsMock.CheckStatusErrorsInc")
	}

	mmCheckStatusErrorsInc.mock.inspectFuncCheckStatusErrorsInc = f

	return mmCheckStatusErrorsInc
}

// Return sets up results that will be returned by Metrics.CheckStatusErrorsInc
func (mmCheckStatusErrorsInc *mMetricsMockCheckStatusErrorsInc) Return() *MetricsMock {
	if mmCheckStatusErrorsInc.mock.funcCheckStatusErrorsInc != nil {
		mmCheckStatusErrorsInc.mock.t.Fatalf("MetricsMock.CheckStatusErrorsInc mock is already set by Set")
	}

	if mmCheckStatusErrorsInc.defaultExpectation == nil {
		mmCheckStatusErrorsInc.defaultExpectation = &MetricsMockCheckStatusErrorsIncExpectation{mock: mmCheckStatusErrorsInc.mock}
	}

	return mmCheckStatusErrorsInc.mock
}

//Set uses given function f to mock the Metrics.CheckStatusErrorsInc method
func (mmCheckStatusErrorsInc *mMetricsMockCheckStatusErrorsInc) Set(f func()) *MetricsMock {
	if mmCheckStatusErrorsInc.defaultExpectation != nil {
		mmCheckStatusErrorsInc.mock.t.Fatalf("Default expectation is already set for the Metrics.CheckStatusErrorsInc method")
	}

	if len(mmCheckStatusErrorsInc.expectations) > 0 {
		mmCheckStatusErrorsInc.mock.t.Fatalf("Some expectations are already set for the Metrics.CheckStatusErrorsInc method")
	}

	mmCheckStatusErrorsInc.mock.funcCheckStatusErrorsInc = f
	return mmCheckStatusErrorsInc.mock
}

// CheckStatusErrorsInc implements Metrics
func (mmCheckStatusErrorsInc *MetricsMock) CheckStatusErrorsInc() {
	mm_atomic.AddUint64(&mmCheckStatusErrorsInc.beforeCheckStatusErrorsIncCounter, 1)
	defer mm_atomic.AddUint64(&mmCheckStatusErrorsInc.afterCheckStatusErrorsIncCounter, 1)

	if mmCheckStatusErrorsInc.inspectFuncCheckStatusErrorsInc != nil {
		mmCheckStatusErrorsInc.inspectFuncCheckStatusErrorsInc()
	}

	if mmCheckStatusErrorsInc.CheckStatusErrorsIncMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmCheckStatusErrorsInc.CheckStatusErrorsIncMock.defaultExpectation.Counter, 1)

		return

	}
	if mmCheckStatusErrorsInc.funcCheckStatusErrorsInc != nil {
		mmCheckStatusErrorsInc.funcCheckStatusErrorsInc()
		return
	}
	mmCheckStatusErrorsInc.t.Fatalf("Unexpected call to MetricsMock.CheckStatusErrorsInc.")

}

// CheckStatusErrorsIncAfterCounter returns a count of finished MetricsMock.CheckStatusErrorsInc invocations
func (mmCheckStatusErrorsInc *MetricsMock) CheckStatusErrorsIncAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCheckStatusErrorsInc.afterCheckStatusErrorsIncCounter)
}

// CheckStatusErrorsIncBeforeCounter returns a count of MetricsMock.CheckStatusErrorsInc invocations
func (mmCheckStatusErrorsInc *MetricsMock) CheckStatusErrorsIncBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCheckStatusErrorsInc.beforeCheckStatusErrorsIncCounter)
}

// MinimockCheckStatusErrorsIncDone returns true if the count of the CheckStatusErrorsInc invocations corresponds
// the number of defined expectations
func (m *MetricsMock) MinimockCheckStatusErrorsIncDone() bool {
	for _, e := range m.CheckStatusErrorsIncMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CheckStatusErrorsIncMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCheckStatusErrorsIncCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCheckStatusErrorsInc != nil && mm_atomic.LoadUint64(&m.afterCheckStatusErrorsIncCounter) < 1 {
		return false
	}
	return true
}

// MinimockCheckStatusErrorsIncInspect logs each unmet expectation
func (m *MetricsMock) MinimockCheckStatusErrorsIncInspect() {
	for _, e := range m.CheckStatusErrorsIncMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to MetricsMock.CheckStatusErrorsInc")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CheckStatusErrorsIncMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCheckStatusErrorsIncCounter) < 1 {
		m.t.Error("Expected call to MetricsMock.CheckStatusErrorsInc")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCheckStatusErrorsInc != nil && mm_atomic.LoadUint64(&m.afterCheckStatusErrorsIncCounter) < 1 {
		m.t.Error("Expected call to MetricsMock.CheckStatusErrorsInc")
	}
}

type mMetricsMockCheckStatusInc struct {
	mock               *MetricsMock
	defaultExpectation *MetricsMockCheckStatusIncExpectation
	expectations       []*MetricsMockCheckStatusIncExpectation
}

// MetricsMockCheckStatusIncExpectation specifies expectation struct of the Metrics.CheckStatusInc
type MetricsMockCheckStatusIncExpectation struct {
	mock *MetricsMock

	Counter uint64
}

// Expect sets up expected params for Metrics.CheckStatusInc
func (mmCheckStatusInc *mMetricsMockCheckStatusInc) Expect() *mMetricsMockCheckStatusInc {
	if mmCheckStatusInc.mock.funcCheckStatusInc != nil {
		mmCheckStatusInc.mock.t.Fatalf("MetricsMock.CheckStatusInc mock is already set by Set")
	}

	if mmCheckStatusInc.defaultExpectation == nil {
		mmCheckStatusInc.defaultExpectation = &MetricsMockCheckStatusIncExpectation{}
	}

	return mmCheckStatusInc
}

// Inspect accepts an inspector function that has same arguments as the Metrics.CheckStatusInc
func (mmCheckStatusInc *mMetricsMockCheckStatusInc) Inspect(f func()) *mMetricsMockCheckStatusInc {
	if mmCheckStatusInc.mock.inspectFuncCheckStatusInc != nil {
		mmCheckStatusInc.mock.t.Fatalf("Inspect function is already set for MetricsMock.CheckStatusInc")
	}

	mmCheckStatusInc.mock.inspectFuncCheckStatusInc = f

	return mmCheckStatusInc
}

// Return sets up results that will be returned by Metrics.CheckStatusInc
func (mmCheckStatusInc *mMetricsMockCheckStatusInc) Return() *MetricsMock {
	if mmCheckStatusInc.mock.funcCheckStatusInc != nil {
		mmCheckStatusInc.mock.t.Fatalf("MetricsMock.CheckStatusInc mock is already set by Set")
	}

	if mmCheckStatusInc.defaultExpectation == nil {
		mmCheckStatusInc.defaultExpectation = &MetricsMockCheckStatusIncExpectation{mock: mmCheckStatusInc.mock}
	}

	return mmCheckStatusInc.mock
}

//Set uses given function f to mock the Metrics.CheckStatusInc method
func (mmCheckStatusInc *mMetricsMockCheckStatusInc) Set(f func()) *MetricsMock {
	if mmCheckStatusInc.defaultExpectation != nil {
		mmCheckStatusInc.mock.t.Fatalf("Default expectation is already set for the Metrics.CheckStatusInc method")
	}

	if len(mmCheckStatusInc.expectations) > 0 {
		mmCheckStatusInc.mock.t.Fatalf("Some expectations are already set for the Metrics.CheckStatusInc method")
	}

	mmCheckStatusInc.mock.funcCheckStatusInc = f
	return mmCheckStatusInc.mock
}

// CheckStatusInc implements Metrics
func (mmCheckStatusInc *MetricsMock) CheckStatusInc() {
	mm_atomic.AddUint64(&mmCheckStatusInc.beforeCheckStatusIncCounter, 1)
	defer mm_atomic.AddUint64(&mmCheckStatusInc.afterCheckStatusIncCounter, 1)

	if mmCheckStatusInc.inspectFuncCheckStatusInc != nil {
		mmCheckStatusInc.inspectFuncCheckStatusInc()
	}

	if mmCheckStatusInc.CheckStatusIncMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmCheckStatusInc.CheckStatusIncMock.defaultExpectation.Counter, 1)

		return

	}
	if mmCheckStatusInc.funcCheckStatusInc != nil {
		mmCheckStatusInc.funcCheckStatusInc()
		return
	}
	mmCheckStatusInc.t.Fatalf("Unexpected call to MetricsMock.CheckStatusInc.")

}

// CheckStatusIncAfterCounter returns a count of finished MetricsMock.CheckStatusInc invocations
func (mmCheckStatusInc *MetricsMock) CheckStatusIncAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCheckStatusInc.afterCheckStatusIncCounter)
}

// CheckStatusIncBeforeCounter returns a count of MetricsMock.CheckStatusInc invocations
func (mmCheckStatusInc *MetricsMock) CheckStatusIncBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCheckStatusInc.beforeCheckStatusIncCounter)
}

// MinimockCheckStatusIncDone returns true if the count of the CheckStatusInc invocations corresponds
// the number of defined expectations
func (m *MetricsMock) MinimockCheckStatusIncDone() bool {
	for _, e := range m.CheckStatusIncMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CheckStatusIncMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCheckStatusIncCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCheckStatusInc != nil && mm_atomic.LoadUint64(&m.afterCheckStatusIncCounter) < 1 {
		return false
	}
	return true
}

// MinimockCheckStatusIncInspect logs each unmet expectation
func (m *MetricsMock) MinimockCheckStatusIncInspect() {
	for _, e := range m.CheckStatusIncMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to MetricsMock.CheckStatusInc")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CheckStatusIncMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCheckStatusIncCounter) < 1 {
		m.t.Error("Expected call to MetricsMock.CheckStatusInc")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCheckStatusInc != nil && mm_atomic.LoadUint64(&m.afterCheckStatusIncCounter) < 1 {
		m.t.Error("Expected call to MetricsMock.CheckStatusInc")
	}
}

type mMetricsMockCreateOrderErrorsInc struct {
	mock               *MetricsMock
	defaultExpectation *MetricsMockCreateOrderErrorsIncExpectation
	expectations       []*MetricsMockCreateOrderErrorsIncExpectation
}

// MetricsMockCreateOrderErrorsIncExpectation specifies expectation struct of the Metrics.CreateOrderErrorsInc
type MetricsMockCreateOrderErrorsIncExpectation struct {
	mock *MetricsMock

	Counter uint64
}

// Expect sets up expected params for Metrics.CreateOrderErrorsInc
func (mmCreateOrderErrorsInc *mMetricsMockCreateOrderErrorsInc) Expect() *mMetricsMockCreateOrderErrorsInc {
	if mmCreateOrderErrorsInc.mock.funcCreateOrderErrorsInc != nil {
		mmCreateOrderErrorsInc.mock.t.Fatalf("MetricsMock.CreateOrderErrorsInc mock is already set by Set")
	}

	if mmCreateOrderErrorsInc.defaultExpectation == nil {
		mmCreateOrderErrorsInc.defaultExpectation = &MetricsMockCreateOrderErrorsIncExpectation{}
	}

	return mmCreateOrderErrorsInc
}

// Inspect accepts an inspector function that has same arguments as the Metrics.CreateOrderErrorsInc
func (mmCreateOrderErrorsInc *mMetricsMockCreateOrderErrorsInc) Inspect(f func()) *mMetricsMockCreateOrderErrorsInc {
	if mmCreateOrderErrorsInc.mock.inspectFuncCreateOrderErrorsInc != nil {
		mmCreateOrderErrorsInc.mock.t.Fatalf("Inspect function is already set for MetricsMock.CreateOrderErrorsInc")
	}

	mmCreateOrderErrorsInc.mock.inspectFuncCreateOrderErrorsInc = f

	return mmCreateOrderErrorsInc
}

// Return sets up results that will be returned by Metrics.CreateOrderErrorsInc
func (mmCreateOrderErrorsInc *mMetricsMockCreateOrderErrorsInc) Return() *MetricsMock {
	if mmCreateOrderErrorsInc.mock.funcCreateOrderErrorsInc != nil {
		mmCreateOrderErrorsInc.mock.t.Fatalf("MetricsMock.CreateOrderErrorsInc mock is already set by Set")
	}

	if mmCreateOrderErrorsInc.defaultExpectation == nil {
		mmCreateOrderErrorsInc.defaultExpectation = &MetricsMockCreateOrderErrorsIncExpectation{mock: mmCreateOrderErrorsInc.mock}
	}

	return mmCreateOrderErrorsInc.mock
}

//Set uses given function f to mock the Metrics.CreateOrderErrorsInc method
func (mmCreateOrderErrorsInc *mMetricsMockCreateOrderErrorsInc) Set(f func()) *MetricsMock {
	if mmCreateOrderErrorsInc.defaultExpectation != nil {
		mmCreateOrderErrorsInc.mock.t.Fatalf("Default expectation is already set for the Metrics.CreateOrderErrorsInc method")
	}

	if len(mmCreateOrderErrorsInc.expectations) > 0 {
		mmCreateOrderErrorsInc.mock.t.Fatalf("Some expectations are already set for the Metrics.CreateOrderErrorsInc method")
	}

	mmCreateOrderErrorsInc.mock.funcCreateOrderErrorsInc = f
	return mmCreateOrderErrorsInc.mock
}

// CreateOrderErrorsInc implements Metrics
func (mmCreateOrderErrorsInc *MetricsMock) CreateOrderErrorsInc() {
	mm_atomic.AddUint64(&mmCreateOrderErrorsInc.beforeCreateOrderErrorsIncCounter, 1)
	defer mm_atomic.AddUint64(&mmCreateOrderErrorsInc.afterCreateOrderErrorsIncCounter, 1)

	if mmCreateOrderErrorsInc.inspectFuncCreateOrderErrorsInc != nil {
		mmCreateOrderErrorsInc.inspectFuncCreateOrderErrorsInc()
	}

	if mmCreateOrderErrorsInc.CreateOrderErrorsIncMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmCreateOrderErrorsInc.CreateOrderErrorsIncMock.defaultExpectation.Counter, 1)

		return

	}
	if mmCreateOrderErrorsInc.funcCreateOrderErrorsInc != nil {
		mmCreateOrderErrorsInc.funcCreateOrderErrorsInc()
		return
	}
	mmCreateOrderErrorsInc.t.Fatalf("Unexpected call to MetricsMock.CreateOrderErrorsInc.")

}

// CreateOrderErrorsIncAfterCounter returns a count of finished MetricsMock.CreateOrderErrorsInc invocations
func (mmCreateOrderErrorsInc *MetricsMock) CreateOrderErrorsIncAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateOrderErrorsInc.afterCreateOrderErrorsIncCounter)
}

// CreateOrderErrorsIncBeforeCounter returns a count of MetricsMock.CreateOrderErrorsInc invocations
func (mmCreateOrderErrorsInc *MetricsMock) CreateOrderErrorsIncBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateOrderErrorsInc.beforeCreateOrderErrorsIncCounter)
}

// MinimockCreateOrderErrorsIncDone returns true if the count of the CreateOrderErrorsInc invocations corresponds
// the number of defined expectations
func (m *MetricsMock) MinimockCreateOrderErrorsIncDone() bool {
	for _, e := range m.CreateOrderErrorsIncMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CreateOrderErrorsIncMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCreateOrderErrorsIncCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreateOrderErrorsInc != nil && mm_atomic.LoadUint64(&m.afterCreateOrderErrorsIncCounter) < 1 {
		return false
	}
	return true
}

// MinimockCreateOrderErrorsIncInspect logs each unmet expectation
func (m *MetricsMock) MinimockCreateOrderErrorsIncInspect() {
	for _, e := range m.CreateOrderErrorsIncMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to MetricsMock.CreateOrderErrorsInc")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CreateOrderErrorsIncMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCreateOrderErrorsIncCounter) < 1 {
		m.t.Error("Expected call to MetricsMock.CreateOrderErrorsInc")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreateOrderErrorsInc != nil && mm_atomic.LoadUint64(&m.afterCreateOrderErrorsIncCounter) < 1 {
		m.t.Error("Expected call to MetricsMock.CreateOrderErrorsInc")
	}
}

type mMetricsMockCreateOrderInc struct {
	mock               *MetricsMock
	defaultExpectation *MetricsMockCreateOrderIncExpectation
	expectations       []*MetricsMockCreateOrderIncExpectation
}

// MetricsMockCreateOrderIncExpectation specifies expectation struct of the Metrics.CreateOrderInc
type MetricsMockCreateOrderIncExpectation struct {
	mock *MetricsMock

	Counter uint64
}

// Expect sets up expected params for Metrics.CreateOrderInc
func (mmCreateOrderInc *mMetricsMockCreateOrderInc) Expect() *mMetricsMockCreateOrderInc {
	if mmCreateOrderInc.mock.funcCreateOrderInc != nil {
		mmCreateOrderInc.mock.t.Fatalf("MetricsMock.CreateOrderInc mock is already set by Set")
	}

	if mmCreateOrderInc.defaultExpectation == nil {
		mmCreateOrderInc.defaultExpectation = &MetricsMockCreateOrderIncExpectation{}
	}

	return mmCreateOrderInc
}

// Inspect accepts an inspector function that has same arguments as the Metrics.CreateOrderInc
func (mmCreateOrderInc *mMetricsMockCreateOrderInc) Inspect(f func()) *mMetricsMockCreateOrderInc {
	if mmCreateOrderInc.mock.inspectFuncCreateOrderInc != nil {
		mmCreateOrderInc.mock.t.Fatalf("Inspect function is already set for MetricsMock.CreateOrderInc")
	}

	mmCreateOrderInc.mock.inspectFuncCreateOrderInc = f

	return mmCreateOrderInc
}

// Return sets up results that will be returned by Metrics.CreateOrderInc
func (mmCreateOrderInc *mMetricsMockCreateOrderInc) Return() *MetricsMock {
	if mmCreateOrderInc.mock.funcCreateOrderInc != nil {
		mmCreateOrderInc.mock.t.Fatalf("MetricsMock.CreateOrderInc mock is already set by Set")
	}

	if mmCreateOrderInc.defaultExpectation == nil {
		mmCreateOrderInc.defaultExpectation = &MetricsMockCreateOrderIncExpectation{mock: mmCreateOrderInc.mock}
	}

	return mmCreateOrderInc.mock
}

//Set uses given function f to mock the Metrics.CreateOrderInc method
func (mmCreateOrderInc *mMetricsMockCreateOrderInc) Set(f func()) *MetricsMock {
	if mmCreateOrderInc.defaultExpectation != nil {
		mmCreateOrderInc.mock.t.Fatalf("Default expectation is already set for the Metrics.CreateOrderInc method")
	}

	if len(mmCreateOrderInc.expectations) > 0 {
		mmCreateOrderInc.mock.t.Fatalf("Some expectations are already set for the Metrics.CreateOrderInc method")
	}

	mmCreateOrderInc.mock.funcCreateOrderInc = f
	return mmCreateOrderInc.mock
}

// CreateOrderInc implements Metrics
func (mmCreateOrderInc *MetricsMock) CreateOrderInc() {
	mm_atomic.AddUint64(&mmCreateOrderInc.beforeCreateOrderIncCounter, 1)
	defer mm_atomic.AddUint64(&mmCreateOrderInc.afterCreateOrderIncCounter, 1)

	if mmCreateOrderInc.inspectFuncCreateOrderInc != nil {
		mmCreateOrderInc.inspectFuncCreateOrderInc()
	}

	if mmCreateOrderInc.CreateOrderIncMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmCreateOrderInc.CreateOrderIncMock.defaultExpectation.Counter, 1)

		return

	}
	if mmCreateOrderInc.funcCreateOrderInc != nil {
		mmCreateOrderInc.funcCreateOrderInc()
		return
	}
	mmCreateOrderInc.t.Fatalf("Unexpected call to MetricsMock.CreateOrderInc.")

}

// CreateOrderIncAfterCounter returns a count of finished MetricsMock.CreateOrderInc invocations
func (mmCreateOrderInc *MetricsMock) CreateOrderIncAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateOrderInc.afterCreateOrderIncCounter)
}

// CreateOrderIncBeforeCounter returns a count of MetricsMock.CreateOrderInc invocations
func (mmCreateOrderInc *MetricsMock) CreateOrderIncBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateOrderInc.beforeCreateOrderIncCounter)
}

// MinimockCreateOrderIncDone returns true if the count of the CreateOrderInc invocations corresponds
// the number of defined expectations
func (m *MetricsMock) MinimockCreateOrderIncDone() bool {
	for _, e := range m.CreateOrderIncMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CreateOrderIncMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCreateOrderIncCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreateOrderInc != nil && mm_atomic.LoadUint64(&m.afterCreateOrderIncCounter) < 1 {
		return false
	}
	return true
}

// MinimockCreateOrderIncInspect logs each unmet expectation
func (m *MetricsMock) MinimockCreateOrderIncInspect() {
	for _, e := range m.CreateOrderIncMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to MetricsMock.CreateOrderInc")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CreateOrderIncMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCreateOrderIncCounter) < 1 {
		m.t.Error("Expected call to MetricsMock.CreateOrderInc")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreateOrderInc != nil && mm_atomic.LoadUint64(&m.afterCreateOrderIncCounter) < 1 {
		m.t.Error("Expected call to MetricsMock.CreateOrderInc")
	}
}

type mMetricsMockRequestErrorsInc struct {
	mock               *MetricsMock
	defaultExpectation *MetricsMockRequestErrorsIncExpectation
	expectations       []*MetricsMockRequestErrorsIncExpectation
}

// MetricsMockRequestErrorsIncExpectation specifies expectation struct of the Metrics.RequestErrorsInc
type MetricsMockRequestErrorsIncExpectation struct {
	mock *MetricsMock

	Counter uint64
}

// Expect sets up expected params for Metrics.RequestErrorsInc
func (mmRequestErrorsInc *mMetricsMockRequestErrorsInc) Expect() *mMetricsMockRequestErrorsInc {
	if mmRequestErrorsInc.mock.funcRequestErrorsInc != nil {
		mmRequestErrorsInc.mock.t.Fatalf("MetricsMock.RequestErrorsInc mock is already set by Set")
	}

	if mmRequestErrorsInc.defaultExpectation == nil {
		mmRequestErrorsInc.defaultExpectation = &MetricsMockRequestErrorsIncExpectation{}
	}

	return mmRequestErrorsInc
}

// Inspect accepts an inspector function that has same arguments as the Metrics.RequestErrorsInc
func (mmRequestErrorsInc *mMetricsMockRequestErrorsInc) Inspect(f func()) *mMetricsMockRequestErrorsInc {
	if mmRequestErrorsInc.mock.inspectFuncRequestErrorsInc != nil {
		mmRequestErrorsInc.mock.t.Fatalf("Inspect function is already set for MetricsMock.RequestErrorsInc")
	}

	mmRequestErrorsInc.mock.inspectFuncRequestErrorsInc = f

	return mmRequestErrorsInc
}

// Return sets up results that will be returned by Metrics.RequestErrorsInc
func (mmRequestErrorsInc *mMetricsMockRequestErrorsInc) Return() *MetricsMock {
	if mmRequestErrorsInc.mock.funcRequestErrorsInc != nil {
		mmRequestErrorsInc.mock.t.Fatalf("MetricsMock.RequestErrorsInc mock is already set by Set")
	}

	if mmRequestErrorsInc.defaultExpectation == nil {
		mmRequestErrorsInc.defaultExpectation = &MetricsMockRequestErrorsIncExpectation{mock: mmRequestErrorsInc.mock}
	}

	return mmRequestErrorsInc.mock
}

//Set uses given function f to mock the Metrics.RequestErrorsInc method
func (mmRequestErrorsInc *mMetricsMockRequestErrorsInc) Set(f func()) *MetricsMock {
	if mmRequestErrorsInc.defaultExpectation != nil {
		mmRequestErrorsInc.mock.t.Fatalf("Default expectation is already set for the Metrics.RequestErrorsInc method")
	}

	if len(mmRequestErrorsInc.expectations) > 0 {
		mmRequestErrorsInc.mock.t.Fatalf("Some expectations are already set for the Metrics.RequestErrorsInc method")
	}

	mmRequestErrorsInc.mock.funcRequestErrorsInc = f
	return mmRequestErrorsInc.mock
}

// RequestErrorsInc implements Metrics
func (mmRequestErrorsInc *MetricsMock) RequestErrorsInc() {
	mm_atomic.AddUint64(&mmRequestErrorsInc.beforeRequestErrorsIncCounter, 1)
	defer mm_atomic.AddUint64(&mmRequestErrorsInc.afterRequestErrorsIncCounter, 1)

	if mmRequestErrorsInc.inspectFuncRequestErrorsInc != nil {
		mmRequestErrorsInc.inspectFuncRequestErrorsInc()
	}

	if mmRequestErrorsInc.RequestErrorsIncMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmRequestErrorsInc.RequestErrorsIncMock.defaultExpectation.Counter, 1)

		return

	}
	if mmRequestErrorsInc.funcRequestErrorsInc != nil {
		mmRequestErrorsInc.funcRequestErrorsInc()
		return
	}
	mmRequestErrorsInc.t.Fatalf("Unexpected call to MetricsMock.RequestErrorsInc.")

}

// RequestErrorsIncAfterCounter returns a count of finished MetricsMock.RequestErrorsInc invocations
func (mmRequestErrorsInc *MetricsMock) RequestErrorsIncAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmRequestErrorsInc.afterRequestErrorsIncCounter)
}

// RequestErrorsIncBeforeCounter returns a count of MetricsMock.RequestErrorsInc invocations
func (mmRequestErrorsInc *MetricsMock) RequestErrorsIncBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmRequestErrorsInc.beforeRequestErrorsIncCounter)
}

// MinimockRequestErrorsIncDone returns true if the count of the RequestErrorsInc invocations corresponds
// the number of defined expectations
func (m *MetricsMock) MinimockRequestErrorsIncDone() bool {
	for _, e := range m.RequestErrorsIncMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.RequestErrorsIncMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterRequestErrorsIncCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcRequestErrorsInc != nil && mm_atomic.LoadUint64(&m.afterRequestErrorsIncCounter) < 1 {
		return false
	}
	return true
}

// MinimockRequestErrorsIncInspect logs each unmet expectation
func (m *MetricsMock) MinimockRequestErrorsIncInspect() {
	for _, e := range m.RequestErrorsIncMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to MetricsMock.RequestErrorsInc")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.RequestErrorsIncMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterRequestErrorsIncCounter) < 1 {
		m.t.Error("Expected call to MetricsMock.RequestErrorsInc")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcRequestErrorsInc != nil && mm_atomic.LoadUint64(&m.afterRequestErrorsIncCounter) < 1 {
		m.t.Error("Expected call to MetricsMock.RequestErrorsInc")
	}
}

type mMetricsMockRequestsInc struct {
	mock               *MetricsMock
	defaultExpectation *MetricsMockRequestsIncExpectation
	expectations       []*MetricsMockRequestsIncExpectation
}

// MetricsMockRequestsIncExpectation specifies expectation struct of the Metrics.RequestsInc
type MetricsMockRequestsIncExpectation struct {
	mock *MetricsMock

	Counter uint64
}

// Expect sets up expected params for Metrics.RequestsInc
func (mmRequestsInc *mMetricsMockRequestsInc) Expect() *mMetricsMockRequestsInc {
	if mmRequestsInc.mock.funcRequestsInc != nil {
		mmRequestsInc.mock.t.Fatalf("MetricsMock.RequestsInc mock is already set by Set")
	}

	if mmRequestsInc.defaultExpectation == nil {
		mmRequestsInc.defaultExpectation = &MetricsMockRequestsIncExpectation{}
	}

	return mmRequestsInc
}

// Inspect accepts an inspector function that has same arguments as the Metrics.RequestsInc
func (mmRequestsInc *mMetricsMockRequestsInc) Inspect(f func()) *mMetricsMockRequestsInc {
	if mmRequestsInc.mock.inspectFuncRequestsInc != nil {
		mmRequestsInc.mock.t.Fatalf("Inspect function is already set for MetricsMock.RequestsInc")
	}

	mmRequestsInc.mock.inspectFuncRequestsInc = f

	return mmRequestsInc
}

// Return sets up results that will be returned by Metrics.RequestsInc
func (mmRequestsInc *mMetricsMockRequestsInc) Return() *MetricsMock {
	if mmRequestsInc.mock.funcRequestsInc != nil {
		mmRequestsInc.mock.t.Fatalf("MetricsMock.RequestsInc mock is already set by Set")
	}

	if mmRequestsInc.defaultExpectation == nil {
		mmRequestsInc.defaultExpectation = &MetricsMockRequestsIncExpectation{mock: mmRequestsInc.mock}
	}

	return mmRequestsInc.mock
}

//Set uses given function f to mock the Metrics.RequestsInc method
func (mmRequestsInc *mMetricsMockRequestsInc) Set(f func()) *MetricsMock {
	if mmRequestsInc.defaultExpectation != nil {
		mmRequestsInc.mock.t.Fatalf("Default expectation is already set for the Metrics.RequestsInc method")
	}

	if len(mmRequestsInc.expectations) > 0 {
		mmRequestsInc.mock.t.Fatalf("Some expectations are already set for the Metrics.RequestsInc method")
	}

	mmRequestsInc.mock.funcRequestsInc = f
	return mmRequestsInc.mock
}

// RequestsInc implements Metrics
func (mmRequestsInc *MetricsMock) RequestsInc() {
	mm_atomic.AddUint64(&mmRequestsInc.beforeRequestsIncCounter, 1)
	defer mm_atomic.AddUint64(&mmRequestsInc.afterRequestsIncCounter, 1)

	if mmRequestsInc.inspectFuncRequestsInc != nil {
		mmRequestsInc.inspectFuncRequestsInc()
	}

	if mmRequestsInc.RequestsIncMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmRequestsInc.RequestsIncMock.defaultExpectation.Counter, 1)

		return

	}
	if mmRequestsInc.funcRequestsInc != nil {
		mmRequestsInc.funcRequestsInc()
		return
	}
	mmRequestsInc.t.Fatalf("Unexpected call to MetricsMock.RequestsInc.")

}

// RequestsIncAfterCounter returns a count of finished MetricsMock.RequestsInc invocations
func (mmRequestsInc *MetricsMock) RequestsIncAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmRequestsInc.afterRequestsIncCounter)
}

// RequestsIncBeforeCounter returns a count of MetricsMock.RequestsInc invocations
func (mmRequestsInc *MetricsMock) RequestsIncBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmRequestsInc.beforeRequestsIncCounter)
}

// MinimockRequestsIncDone returns true if the count of the RequestsInc invocations corresponds
// the number of defined expectations
func (m *MetricsMock) MinimockRequestsIncDone() bool {
	for _, e := range m.RequestsIncMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.RequestsIncMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterRequestsIncCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcRequestsInc != nil && mm_atomic.LoadUint64(&m.afterRequestsIncCounter) < 1 {
		return false
	}
	return true
}

// MinimockRequestsIncInspect logs each unmet expectation
func (m *MetricsMock) MinimockRequestsIncInspect() {
	for _, e := range m.RequestsIncMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to MetricsMock.RequestsInc")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.RequestsIncMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterRequestsIncCounter) < 1 {
		m.t.Error("Expected call to MetricsMock.RequestsInc")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcRequestsInc != nil && mm_atomic.LoadUint64(&m.afterRequestsIncCounter) < 1 {
		m.t.Error("Expected call to MetricsMock.RequestsInc")
	}
}

type mMetricsMockUpdateStatusErrorsInc struct {
	mock               *MetricsMock
	defaultExpectation *MetricsMockUpdateStatusErrorsIncExpectation
	expectations       []*MetricsMockUpdateStatusErrorsIncExpectation
}

// MetricsMockUpdateStatusErrorsIncExpectation specifies expectation struct of the Metrics.UpdateStatusErrorsInc
type MetricsMockUpdateStatusErrorsIncExpectation struct {
	mock *MetricsMock

	Counter uint64
}

// Expect sets up expected params for Metrics.UpdateStatusErrorsInc
func (mmUpdateStatusErrorsInc *mMetricsMockUpdateStatusErrorsInc) Expect() *mMetricsMockUpdateStatusErrorsInc {
	if mmUpdateStatusErrorsInc.mock.funcUpdateStatusErrorsInc != nil {
		mmUpdateStatusErrorsInc.mock.t.Fatalf("MetricsMock.UpdateStatusErrorsInc mock is already set by Set")
	}

	if mmUpdateStatusErrorsInc.defaultExpectation == nil {
		mmUpdateStatusErrorsInc.defaultExpectation = &MetricsMockUpdateStatusErrorsIncExpectation{}
	}

	return mmUpdateStatusErrorsInc
}

// Inspect accepts an inspector function that has same arguments as the Metrics.UpdateStatusErrorsInc
func (mmUpdateStatusErrorsInc *mMetricsMockUpdateStatusErrorsInc) Inspect(f func()) *mMetricsMockUpdateStatusErrorsInc {
	if mmUpdateStatusErrorsInc.mock.inspectFuncUpdateStatusErrorsInc != nil {
		mmUpdateStatusErrorsInc.mock.t.Fatalf("Inspect function is already set for MetricsMock.UpdateStatusErrorsInc")
	}

	mmUpdateStatusErrorsInc.mock.inspectFuncUpdateStatusErrorsInc = f

	return mmUpdateStatusErrorsInc
}

// Return sets up results that will be returned by Metrics.UpdateStatusErrorsInc
func (mmUpdateStatusErrorsInc *mMetricsMockUpdateStatusErrorsInc) Return() *MetricsMock {
	if mmUpdateStatusErrorsInc.mock.funcUpdateStatusErrorsInc != nil {
		mmUpdateStatusErrorsInc.mock.t.Fatalf("MetricsMock.UpdateStatusErrorsInc mock is already set by Set")
	}

	if mmUpdateStatusErrorsInc.defaultExpectation == nil {
		mmUpdateStatusErrorsInc.defaultExpectation = &MetricsMockUpdateStatusErrorsIncExpectation{mock: mmUpdateStatusErrorsInc.mock}
	}

	return mmUpdateStatusErrorsInc.mock
}

//Set uses given function f to mock the Metrics.UpdateStatusErrorsInc method
func (mmUpdateStatusErrorsInc *mMetricsMockUpdateStatusErrorsInc) Set(f func()) *MetricsMock {
	if mmUpdateStatusErrorsInc.defaultExpectation != nil {
		mmUpdateStatusErrorsInc.mock.t.Fatalf("Default expectation is already set for the Metrics.UpdateStatusErrorsInc method")
	}

	if len(mmUpdateStatusErrorsInc.expectations) > 0 {
		mmUpdateStatusErrorsInc.mock.t.Fatalf("Some expectations are already set for the Metrics.UpdateStatusErrorsInc method")
	}

	mmUpdateStatusErrorsInc.mock.funcUpdateStatusErrorsInc = f
	return mmUpdateStatusErrorsInc.mock
}

// UpdateStatusErrorsInc implements Metrics
func (mmUpdateStatusErrorsInc *MetricsMock) UpdateStatusErrorsInc() {
	mm_atomic.AddUint64(&mmUpdateStatusErrorsInc.beforeUpdateStatusErrorsIncCounter, 1)
	defer mm_atomic.AddUint64(&mmUpdateStatusErrorsInc.afterUpdateStatusErrorsIncCounter, 1)

	if mmUpdateStatusErrorsInc.inspectFuncUpdateStatusErrorsInc != nil {
		mmUpdateStatusErrorsInc.inspectFuncUpdateStatusErrorsInc()
	}

	if mmUpdateStatusErrorsInc.UpdateStatusErrorsIncMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmUpdateStatusErrorsInc.UpdateStatusErrorsIncMock.defaultExpectation.Counter, 1)

		return

	}
	if mmUpdateStatusErrorsInc.funcUpdateStatusErrorsInc != nil {
		mmUpdateStatusErrorsInc.funcUpdateStatusErrorsInc()
		return
	}
	mmUpdateStatusErrorsInc.t.Fatalf("Unexpected call to MetricsMock.UpdateStatusErrorsInc.")

}

// UpdateStatusErrorsIncAfterCounter returns a count of finished MetricsMock.UpdateStatusErrorsInc invocations
func (mmUpdateStatusErrorsInc *MetricsMock) UpdateStatusErrorsIncAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUpdateStatusErrorsInc.afterUpdateStatusErrorsIncCounter)
}

// UpdateStatusErrorsIncBeforeCounter returns a count of MetricsMock.UpdateStatusErrorsInc invocations
func (mmUpdateStatusErrorsInc *MetricsMock) UpdateStatusErrorsIncBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUpdateStatusErrorsInc.beforeUpdateStatusErrorsIncCounter)
}

// MinimockUpdateStatusErrorsIncDone returns true if the count of the UpdateStatusErrorsInc invocations corresponds
// the number of defined expectations
func (m *MetricsMock) MinimockUpdateStatusErrorsIncDone() bool {
	for _, e := range m.UpdateStatusErrorsIncMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.UpdateStatusErrorsIncMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterUpdateStatusErrorsIncCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcUpdateStatusErrorsInc != nil && mm_atomic.LoadUint64(&m.afterUpdateStatusErrorsIncCounter) < 1 {
		return false
	}
	return true
}

// MinimockUpdateStatusErrorsIncInspect logs each unmet expectation
func (m *MetricsMock) MinimockUpdateStatusErrorsIncInspect() {
	for _, e := range m.UpdateStatusErrorsIncMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to MetricsMock.UpdateStatusErrorsInc")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.UpdateStatusErrorsIncMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterUpdateStatusErrorsIncCounter) < 1 {
		m.t.Error("Expected call to MetricsMock.UpdateStatusErrorsInc")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcUpdateStatusErrorsInc != nil && mm_atomic.LoadUint64(&m.afterUpdateStatusErrorsIncCounter) < 1 {
		m.t.Error("Expected call to MetricsMock.UpdateStatusErrorsInc")
	}
}

type mMetricsMockUpdateStatusInc struct {
	mock               *MetricsMock
	defaultExpectation *MetricsMockUpdateStatusIncExpectation
	expectations       []*MetricsMockUpdateStatusIncExpectation
}

// MetricsMockUpdateStatusIncExpectation specifies expectation struct of the Metrics.UpdateStatusInc
type MetricsMockUpdateStatusIncExpectation struct {
	mock *MetricsMock

	Counter uint64
}

// Expect sets up expected params for Metrics.UpdateStatusInc
func (mmUpdateStatusInc *mMetricsMockUpdateStatusInc) Expect() *mMetricsMockUpdateStatusInc {
	if mmUpdateStatusInc.mock.funcUpdateStatusInc != nil {
		mmUpdateStatusInc.mock.t.Fatalf("MetricsMock.UpdateStatusInc mock is already set by Set")
	}

	if mmUpdateStatusInc.defaultExpectation == nil {
		mmUpdateStatusInc.defaultExpectation = &MetricsMockUpdateStatusIncExpectation{}
	}

	return mmUpdateStatusInc
}

// Inspect accepts an inspector function that has same arguments as the Metrics.UpdateStatusInc
func (mmUpdateStatusInc *mMetricsMockUpdateStatusInc) Inspect(f func()) *mMetricsMockUpdateStatusInc {
	if mmUpdateStatusInc.mock.inspectFuncUpdateStatusInc != nil {
		mmUpdateStatusInc.mock.t.Fatalf("Inspect function is already set for MetricsMock.UpdateStatusInc")
	}

	mmUpdateStatusInc.mock.inspectFuncUpdateStatusInc = f

	return mmUpdateStatusInc
}

// Return sets up results that will be returned by Metrics.UpdateStatusInc
func (mmUpdateStatusInc *mMetricsMockUpdateStatusInc) Return() *MetricsMock {
	if mmUpdateStatusInc.mock.funcUpdateStatusInc != nil {
		mmUpdateStatusInc.mock.t.Fatalf("MetricsMock.UpdateStatusInc mock is already set by Set")
	}

	if mmUpdateStatusInc.defaultExpectation == nil {
		mmUpdateStatusInc.defaultExpectation = &MetricsMockUpdateStatusIncExpectation{mock: mmUpdateStatusInc.mock}
	}

	return mmUpdateStatusInc.mock
}

//Set uses given function f to mock the Metrics.UpdateStatusInc method
func (mmUpdateStatusInc *mMetricsMockUpdateStatusInc) Set(f func()) *MetricsMock {
	if mmUpdateStatusInc.defaultExpectation != nil {
		mmUpdateStatusInc.mock.t.Fatalf("Default expectation is already set for the Metrics.UpdateStatusInc method")
	}

	if len(mmUpdateStatusInc.expectations) > 0 {
		mmUpdateStatusInc.mock.t.Fatalf("Some expectations are already set for the Metrics.UpdateStatusInc method")
	}

	mmUpdateStatusInc.mock.funcUpdateStatusInc = f
	return mmUpdateStatusInc.mock
}

// UpdateStatusInc implements Metrics
func (mmUpdateStatusInc *MetricsMock) UpdateStatusInc() {
	mm_atomic.AddUint64(&mmUpdateStatusInc.beforeUpdateStatusIncCounter, 1)
	defer mm_atomic.AddUint64(&mmUpdateStatusInc.afterUpdateStatusIncCounter, 1)

	if mmUpdateStatusInc.inspectFuncUpdateStatusInc != nil {
		mmUpdateStatusInc.inspectFuncUpdateStatusInc()
	}

	if mmUpdateStatusInc.UpdateStatusIncMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmUpdateStatusInc.UpdateStatusIncMock.defaultExpectation.Counter, 1)

		return

	}
	if mmUpdateStatusInc.funcUpdateStatusInc != nil {
		mmUpdateStatusInc.funcUpdateStatusInc()
		return
	}
	mmUpdateStatusInc.t.Fatalf("Unexpected call to MetricsMock.UpdateStatusInc.")

}

// UpdateStatusIncAfterCounter returns a count of finished MetricsMock.UpdateStatusInc invocations
func (mmUpdateStatusInc *MetricsMock) UpdateStatusIncAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUpdateStatusInc.afterUpdateStatusIncCounter)
}

// UpdateStatusIncBeforeCounter returns a count of MetricsMock.UpdateStatusInc invocations
func (mmUpdateStatusInc *MetricsMock) UpdateStatusIncBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUpdateStatusInc.beforeUpdateStatusIncCounter)
}

// MinimockUpdateStatusIncDone returns true if the count of the UpdateStatusInc invocations corresponds
// the number of defined expectations
func (m *MetricsMock) MinimockUpdateStatusIncDone() bool {
	for _, e := range m.UpdateStatusIncMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.UpdateStatusIncMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterUpdateStatusIncCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcUpdateStatusInc != nil && mm_atomic.LoadUint64(&m.afterUpdateStatusIncCounter) < 1 {
		return false
	}
	return true
}

// MinimockUpdateStatusIncInspect logs each unmet expectation
func (m *MetricsMock) MinimockUpdateStatusIncInspect() {
	for _, e := range m.UpdateStatusIncMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to MetricsMock.UpdateStatusInc")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.UpdateStatusIncMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterUpdateStatusIncCounter) < 1 {
		m.t.Error("Expected call to MetricsMock.UpdateStatusInc")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcUpdateStatusInc != nil && mm_atomic.LoadUint64(&m.afterUpdateStatusIncCounter) < 1 {
		m.t.Error("Expected call to MetricsMock.UpdateStatusInc")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *MetricsMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockCheckStatusErrorsIncInspect()

		m.MinimockCheckStatusIncInspect()

		m.MinimockCreateOrderErrorsIncInspect()

		m.MinimockCreateOrderIncInspect()

		m.MinimockRequestErrorsIncInspect()

		m.MinimockRequestsIncInspect()

		m.MinimockUpdateStatusErrorsIncInspect()

		m.MinimockUpdateStatusIncInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *MetricsMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *MetricsMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockCheckStatusErrorsIncDone() &&
		m.MinimockCheckStatusIncDone() &&
		m.MinimockCreateOrderErrorsIncDone() &&
		m.MinimockCreateOrderIncDone() &&
		m.MinimockRequestErrorsIncDone() &&
		m.MinimockRequestsIncDone() &&
		m.MinimockUpdateStatusErrorsIncDone() &&
		m.MinimockUpdateStatusIncDone()
}
