package service

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

//go:generate minimock -i gitlab.ozon.dev/lvjonok/homework-3/internal/service-orders/service.WarehouseClient -o ./wh_mock.go -n WarehouseClientMock

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	"gitlab.ozon.dev/lvjonok/homework-3/pkg/common/api"
	whAPI "gitlab.ozon.dev/lvjonok/homework-3/pkg/srv_warehouse/api"
)

// WarehouseClientMock implements WarehouseClient
type WarehouseClientMock struct {
	t minimock.Tester

	funcBookProducts          func(ctx context.Context, bp1 *whAPI.BookProductsRequest) (bp2 *whAPI.BookProductsResponse, err error)
	inspectFuncBookProducts   func(ctx context.Context, bp1 *whAPI.BookProductsRequest)
	afterBookProductsCounter  uint64
	beforeBookProductsCounter uint64
	BookProductsMock          mWarehouseClientMockBookProducts

	funcCheckProducts          func(ctx context.Context, cp1 *whAPI.CheckProductsRequest) (cp2 *whAPI.CheckProductsResponse, err error)
	inspectFuncCheckProducts   func(ctx context.Context, cp1 *whAPI.CheckProductsRequest)
	afterCheckProductsCounter  uint64
	beforeCheckProductsCounter uint64
	CheckProductsMock          mWarehouseClientMockCheckProducts

	funcUnbookProducts          func(ctx context.Context, up1 *whAPI.UnbookProductsRequest) (ep1 *api.Empty, err error)
	inspectFuncUnbookProducts   func(ctx context.Context, up1 *whAPI.UnbookProductsRequest)
	afterUnbookProductsCounter  uint64
	beforeUnbookProductsCounter uint64
	UnbookProductsMock          mWarehouseClientMockUnbookProducts
}

// NewWarehouseClientMock returns a mock for WarehouseClient
func NewWarehouseClientMock(t minimock.Tester) *WarehouseClientMock {
	m := &WarehouseClientMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.BookProductsMock = mWarehouseClientMockBookProducts{mock: m}
	m.BookProductsMock.callArgs = []*WarehouseClientMockBookProductsParams{}

	m.CheckProductsMock = mWarehouseClientMockCheckProducts{mock: m}
	m.CheckProductsMock.callArgs = []*WarehouseClientMockCheckProductsParams{}

	m.UnbookProductsMock = mWarehouseClientMockUnbookProducts{mock: m}
	m.UnbookProductsMock.callArgs = []*WarehouseClientMockUnbookProductsParams{}

	return m
}

type mWarehouseClientMockBookProducts struct {
	mock               *WarehouseClientMock
	defaultExpectation *WarehouseClientMockBookProductsExpectation
	expectations       []*WarehouseClientMockBookProductsExpectation

	callArgs []*WarehouseClientMockBookProductsParams
	mutex    sync.RWMutex
}

// WarehouseClientMockBookProductsExpectation specifies expectation struct of the WarehouseClient.BookProducts
type WarehouseClientMockBookProductsExpectation struct {
	mock    *WarehouseClientMock
	params  *WarehouseClientMockBookProductsParams
	results *WarehouseClientMockBookProductsResults
	Counter uint64
}

// WarehouseClientMockBookProductsParams contains parameters of the WarehouseClient.BookProducts
type WarehouseClientMockBookProductsParams struct {
	ctx context.Context
	bp1 *whAPI.BookProductsRequest
}

// WarehouseClientMockBookProductsResults contains results of the WarehouseClient.BookProducts
type WarehouseClientMockBookProductsResults struct {
	bp2 *whAPI.BookProductsResponse
	err error
}

// Expect sets up expected params for WarehouseClient.BookProducts
func (mmBookProducts *mWarehouseClientMockBookProducts) Expect(ctx context.Context, bp1 *whAPI.BookProductsRequest) *mWarehouseClientMockBookProducts {
	if mmBookProducts.mock.funcBookProducts != nil {
		mmBookProducts.mock.t.Fatalf("WarehouseClientMock.BookProducts mock is already set by Set")
	}

	if mmBookProducts.defaultExpectation == nil {
		mmBookProducts.defaultExpectation = &WarehouseClientMockBookProductsExpectation{}
	}

	mmBookProducts.defaultExpectation.params = &WarehouseClientMockBookProductsParams{ctx, bp1}
	for _, e := range mmBookProducts.expectations {
		if minimock.Equal(e.params, mmBookProducts.defaultExpectation.params) {
			mmBookProducts.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmBookProducts.defaultExpectation.params)
		}
	}

	return mmBookProducts
}

// Inspect accepts an inspector function that has same arguments as the WarehouseClient.BookProducts
func (mmBookProducts *mWarehouseClientMockBookProducts) Inspect(f func(ctx context.Context, bp1 *whAPI.BookProductsRequest)) *mWarehouseClientMockBookProducts {
	if mmBookProducts.mock.inspectFuncBookProducts != nil {
		mmBookProducts.mock.t.Fatalf("Inspect function is already set for WarehouseClientMock.BookProducts")
	}

	mmBookProducts.mock.inspectFuncBookProducts = f

	return mmBookProducts
}

// Return sets up results that will be returned by WarehouseClient.BookProducts
func (mmBookProducts *mWarehouseClientMockBookProducts) Return(bp2 *whAPI.BookProductsResponse, err error) *WarehouseClientMock {
	if mmBookProducts.mock.funcBookProducts != nil {
		mmBookProducts.mock.t.Fatalf("WarehouseClientMock.BookProducts mock is already set by Set")
	}

	if mmBookProducts.defaultExpectation == nil {
		mmBookProducts.defaultExpectation = &WarehouseClientMockBookProductsExpectation{mock: mmBookProducts.mock}
	}
	mmBookProducts.defaultExpectation.results = &WarehouseClientMockBookProductsResults{bp2, err}
	return mmBookProducts.mock
}

//Set uses given function f to mock the WarehouseClient.BookProducts method
func (mmBookProducts *mWarehouseClientMockBookProducts) Set(f func(ctx context.Context, bp1 *whAPI.BookProductsRequest) (bp2 *whAPI.BookProductsResponse, err error)) *WarehouseClientMock {
	if mmBookProducts.defaultExpectation != nil {
		mmBookProducts.mock.t.Fatalf("Default expectation is already set for the WarehouseClient.BookProducts method")
	}

	if len(mmBookProducts.expectations) > 0 {
		mmBookProducts.mock.t.Fatalf("Some expectations are already set for the WarehouseClient.BookProducts method")
	}

	mmBookProducts.mock.funcBookProducts = f
	return mmBookProducts.mock
}

// When sets expectation for the WarehouseClient.BookProducts which will trigger the result defined by the following
// Then helper
func (mmBookProducts *mWarehouseClientMockBookProducts) When(ctx context.Context, bp1 *whAPI.BookProductsRequest) *WarehouseClientMockBookProductsExpectation {
	if mmBookProducts.mock.funcBookProducts != nil {
		mmBookProducts.mock.t.Fatalf("WarehouseClientMock.BookProducts mock is already set by Set")
	}

	expectation := &WarehouseClientMockBookProductsExpectation{
		mock:   mmBookProducts.mock,
		params: &WarehouseClientMockBookProductsParams{ctx, bp1},
	}
	mmBookProducts.expectations = append(mmBookProducts.expectations, expectation)
	return expectation
}

// Then sets up WarehouseClient.BookProducts return parameters for the expectation previously defined by the When method
func (e *WarehouseClientMockBookProductsExpectation) Then(bp2 *whAPI.BookProductsResponse, err error) *WarehouseClientMock {
	e.results = &WarehouseClientMockBookProductsResults{bp2, err}
	return e.mock
}

// BookProducts implements WarehouseClient
func (mmBookProducts *WarehouseClientMock) BookProducts(ctx context.Context, bp1 *whAPI.BookProductsRequest) (bp2 *whAPI.BookProductsResponse, err error) {
	mm_atomic.AddUint64(&mmBookProducts.beforeBookProductsCounter, 1)
	defer mm_atomic.AddUint64(&mmBookProducts.afterBookProductsCounter, 1)

	if mmBookProducts.inspectFuncBookProducts != nil {
		mmBookProducts.inspectFuncBookProducts(ctx, bp1)
	}

	mm_params := &WarehouseClientMockBookProductsParams{ctx, bp1}

	// Record call args
	mmBookProducts.BookProductsMock.mutex.Lock()
	mmBookProducts.BookProductsMock.callArgs = append(mmBookProducts.BookProductsMock.callArgs, mm_params)
	mmBookProducts.BookProductsMock.mutex.Unlock()

	for _, e := range mmBookProducts.BookProductsMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.bp2, e.results.err
		}
	}

	if mmBookProducts.BookProductsMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmBookProducts.BookProductsMock.defaultExpectation.Counter, 1)
		mm_want := mmBookProducts.BookProductsMock.defaultExpectation.params
		mm_got := WarehouseClientMockBookProductsParams{ctx, bp1}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmBookProducts.t.Errorf("WarehouseClientMock.BookProducts got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmBookProducts.BookProductsMock.defaultExpectation.results
		if mm_results == nil {
			mmBookProducts.t.Fatal("No results are set for the WarehouseClientMock.BookProducts")
		}
		return (*mm_results).bp2, (*mm_results).err
	}
	if mmBookProducts.funcBookProducts != nil {
		return mmBookProducts.funcBookProducts(ctx, bp1)
	}
	mmBookProducts.t.Fatalf("Unexpected call to WarehouseClientMock.BookProducts. %v %v", ctx, bp1)
	return
}

// BookProductsAfterCounter returns a count of finished WarehouseClientMock.BookProducts invocations
func (mmBookProducts *WarehouseClientMock) BookProductsAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmBookProducts.afterBookProductsCounter)
}

// BookProductsBeforeCounter returns a count of WarehouseClientMock.BookProducts invocations
func (mmBookProducts *WarehouseClientMock) BookProductsBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmBookProducts.beforeBookProductsCounter)
}

// Calls returns a list of arguments used in each call to WarehouseClientMock.BookProducts.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmBookProducts *mWarehouseClientMockBookProducts) Calls() []*WarehouseClientMockBookProductsParams {
	mmBookProducts.mutex.RLock()

	argCopy := make([]*WarehouseClientMockBookProductsParams, len(mmBookProducts.callArgs))
	copy(argCopy, mmBookProducts.callArgs)

	mmBookProducts.mutex.RUnlock()

	return argCopy
}

// MinimockBookProductsDone returns true if the count of the BookProducts invocations corresponds
// the number of defined expectations
func (m *WarehouseClientMock) MinimockBookProductsDone() bool {
	for _, e := range m.BookProductsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.BookProductsMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterBookProductsCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcBookProducts != nil && mm_atomic.LoadUint64(&m.afterBookProductsCounter) < 1 {
		return false
	}
	return true
}

// MinimockBookProductsInspect logs each unmet expectation
func (m *WarehouseClientMock) MinimockBookProductsInspect() {
	for _, e := range m.BookProductsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to WarehouseClientMock.BookProducts with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.BookProductsMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterBookProductsCounter) < 1 {
		if m.BookProductsMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to WarehouseClientMock.BookProducts")
		} else {
			m.t.Errorf("Expected call to WarehouseClientMock.BookProducts with params: %#v", *m.BookProductsMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcBookProducts != nil && mm_atomic.LoadUint64(&m.afterBookProductsCounter) < 1 {
		m.t.Error("Expected call to WarehouseClientMock.BookProducts")
	}
}

type mWarehouseClientMockCheckProducts struct {
	mock               *WarehouseClientMock
	defaultExpectation *WarehouseClientMockCheckProductsExpectation
	expectations       []*WarehouseClientMockCheckProductsExpectation

	callArgs []*WarehouseClientMockCheckProductsParams
	mutex    sync.RWMutex
}

// WarehouseClientMockCheckProductsExpectation specifies expectation struct of the WarehouseClient.CheckProducts
type WarehouseClientMockCheckProductsExpectation struct {
	mock    *WarehouseClientMock
	params  *WarehouseClientMockCheckProductsParams
	results *WarehouseClientMockCheckProductsResults
	Counter uint64
}

// WarehouseClientMockCheckProductsParams contains parameters of the WarehouseClient.CheckProducts
type WarehouseClientMockCheckProductsParams struct {
	ctx context.Context
	cp1 *whAPI.CheckProductsRequest
}

// WarehouseClientMockCheckProductsResults contains results of the WarehouseClient.CheckProducts
type WarehouseClientMockCheckProductsResults struct {
	cp2 *whAPI.CheckProductsResponse
	err error
}

// Expect sets up expected params for WarehouseClient.CheckProducts
func (mmCheckProducts *mWarehouseClientMockCheckProducts) Expect(ctx context.Context, cp1 *whAPI.CheckProductsRequest) *mWarehouseClientMockCheckProducts {
	if mmCheckProducts.mock.funcCheckProducts != nil {
		mmCheckProducts.mock.t.Fatalf("WarehouseClientMock.CheckProducts mock is already set by Set")
	}

	if mmCheckProducts.defaultExpectation == nil {
		mmCheckProducts.defaultExpectation = &WarehouseClientMockCheckProductsExpectation{}
	}

	mmCheckProducts.defaultExpectation.params = &WarehouseClientMockCheckProductsParams{ctx, cp1}
	for _, e := range mmCheckProducts.expectations {
		if minimock.Equal(e.params, mmCheckProducts.defaultExpectation.params) {
			mmCheckProducts.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmCheckProducts.defaultExpectation.params)
		}
	}

	return mmCheckProducts
}

// Inspect accepts an inspector function that has same arguments as the WarehouseClient.CheckProducts
func (mmCheckProducts *mWarehouseClientMockCheckProducts) Inspect(f func(ctx context.Context, cp1 *whAPI.CheckProductsRequest)) *mWarehouseClientMockCheckProducts {
	if mmCheckProducts.mock.inspectFuncCheckProducts != nil {
		mmCheckProducts.mock.t.Fatalf("Inspect function is already set for WarehouseClientMock.CheckProducts")
	}

	mmCheckProducts.mock.inspectFuncCheckProducts = f

	return mmCheckProducts
}

// Return sets up results that will be returned by WarehouseClient.CheckProducts
func (mmCheckProducts *mWarehouseClientMockCheckProducts) Return(cp2 *whAPI.CheckProductsResponse, err error) *WarehouseClientMock {
	if mmCheckProducts.mock.funcCheckProducts != nil {
		mmCheckProducts.mock.t.Fatalf("WarehouseClientMock.CheckProducts mock is already set by Set")
	}

	if mmCheckProducts.defaultExpectation == nil {
		mmCheckProducts.defaultExpectation = &WarehouseClientMockCheckProductsExpectation{mock: mmCheckProducts.mock}
	}
	mmCheckProducts.defaultExpectation.results = &WarehouseClientMockCheckProductsResults{cp2, err}
	return mmCheckProducts.mock
}

//Set uses given function f to mock the WarehouseClient.CheckProducts method
func (mmCheckProducts *mWarehouseClientMockCheckProducts) Set(f func(ctx context.Context, cp1 *whAPI.CheckProductsRequest) (cp2 *whAPI.CheckProductsResponse, err error)) *WarehouseClientMock {
	if mmCheckProducts.defaultExpectation != nil {
		mmCheckProducts.mock.t.Fatalf("Default expectation is already set for the WarehouseClient.CheckProducts method")
	}

	if len(mmCheckProducts.expectations) > 0 {
		mmCheckProducts.mock.t.Fatalf("Some expectations are already set for the WarehouseClient.CheckProducts method")
	}

	mmCheckProducts.mock.funcCheckProducts = f
	return mmCheckProducts.mock
}

// When sets expectation for the WarehouseClient.CheckProducts which will trigger the result defined by the following
// Then helper
func (mmCheckProducts *mWarehouseClientMockCheckProducts) When(ctx context.Context, cp1 *whAPI.CheckProductsRequest) *WarehouseClientMockCheckProductsExpectation {
	if mmCheckProducts.mock.funcCheckProducts != nil {
		mmCheckProducts.mock.t.Fatalf("WarehouseClientMock.CheckProducts mock is already set by Set")
	}

	expectation := &WarehouseClientMockCheckProductsExpectation{
		mock:   mmCheckProducts.mock,
		params: &WarehouseClientMockCheckProductsParams{ctx, cp1},
	}
	mmCheckProducts.expectations = append(mmCheckProducts.expectations, expectation)
	return expectation
}

// Then sets up WarehouseClient.CheckProducts return parameters for the expectation previously defined by the When method
func (e *WarehouseClientMockCheckProductsExpectation) Then(cp2 *whAPI.CheckProductsResponse, err error) *WarehouseClientMock {
	e.results = &WarehouseClientMockCheckProductsResults{cp2, err}
	return e.mock
}

// CheckProducts implements WarehouseClient
func (mmCheckProducts *WarehouseClientMock) CheckProducts(ctx context.Context, cp1 *whAPI.CheckProductsRequest) (cp2 *whAPI.CheckProductsResponse, err error) {
	mm_atomic.AddUint64(&mmCheckProducts.beforeCheckProductsCounter, 1)
	defer mm_atomic.AddUint64(&mmCheckProducts.afterCheckProductsCounter, 1)

	if mmCheckProducts.inspectFuncCheckProducts != nil {
		mmCheckProducts.inspectFuncCheckProducts(ctx, cp1)
	}

	mm_params := &WarehouseClientMockCheckProductsParams{ctx, cp1}

	// Record call args
	mmCheckProducts.CheckProductsMock.mutex.Lock()
	mmCheckProducts.CheckProductsMock.callArgs = append(mmCheckProducts.CheckProductsMock.callArgs, mm_params)
	mmCheckProducts.CheckProductsMock.mutex.Unlock()

	for _, e := range mmCheckProducts.CheckProductsMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.cp2, e.results.err
		}
	}

	if mmCheckProducts.CheckProductsMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmCheckProducts.CheckProductsMock.defaultExpectation.Counter, 1)
		mm_want := mmCheckProducts.CheckProductsMock.defaultExpectation.params
		mm_got := WarehouseClientMockCheckProductsParams{ctx, cp1}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmCheckProducts.t.Errorf("WarehouseClientMock.CheckProducts got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmCheckProducts.CheckProductsMock.defaultExpectation.results
		if mm_results == nil {
			mmCheckProducts.t.Fatal("No results are set for the WarehouseClientMock.CheckProducts")
		}
		return (*mm_results).cp2, (*mm_results).err
	}
	if mmCheckProducts.funcCheckProducts != nil {
		return mmCheckProducts.funcCheckProducts(ctx, cp1)
	}
	mmCheckProducts.t.Fatalf("Unexpected call to WarehouseClientMock.CheckProducts. %v %v", ctx, cp1)
	return
}

// CheckProductsAfterCounter returns a count of finished WarehouseClientMock.CheckProducts invocations
func (mmCheckProducts *WarehouseClientMock) CheckProductsAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCheckProducts.afterCheckProductsCounter)
}

// CheckProductsBeforeCounter returns a count of WarehouseClientMock.CheckProducts invocations
func (mmCheckProducts *WarehouseClientMock) CheckProductsBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCheckProducts.beforeCheckProductsCounter)
}

// Calls returns a list of arguments used in each call to WarehouseClientMock.CheckProducts.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmCheckProducts *mWarehouseClientMockCheckProducts) Calls() []*WarehouseClientMockCheckProductsParams {
	mmCheckProducts.mutex.RLock()

	argCopy := make([]*WarehouseClientMockCheckProductsParams, len(mmCheckProducts.callArgs))
	copy(argCopy, mmCheckProducts.callArgs)

	mmCheckProducts.mutex.RUnlock()

	return argCopy
}

// MinimockCheckProductsDone returns true if the count of the CheckProducts invocations corresponds
// the number of defined expectations
func (m *WarehouseClientMock) MinimockCheckProductsDone() bool {
	for _, e := range m.CheckProductsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CheckProductsMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCheckProductsCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCheckProducts != nil && mm_atomic.LoadUint64(&m.afterCheckProductsCounter) < 1 {
		return false
	}
	return true
}

// MinimockCheckProductsInspect logs each unmet expectation
func (m *WarehouseClientMock) MinimockCheckProductsInspect() {
	for _, e := range m.CheckProductsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to WarehouseClientMock.CheckProducts with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CheckProductsMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCheckProductsCounter) < 1 {
		if m.CheckProductsMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to WarehouseClientMock.CheckProducts")
		} else {
			m.t.Errorf("Expected call to WarehouseClientMock.CheckProducts with params: %#v", *m.CheckProductsMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCheckProducts != nil && mm_atomic.LoadUint64(&m.afterCheckProductsCounter) < 1 {
		m.t.Error("Expected call to WarehouseClientMock.CheckProducts")
	}
}

type mWarehouseClientMockUnbookProducts struct {
	mock               *WarehouseClientMock
	defaultExpectation *WarehouseClientMockUnbookProductsExpectation
	expectations       []*WarehouseClientMockUnbookProductsExpectation

	callArgs []*WarehouseClientMockUnbookProductsParams
	mutex    sync.RWMutex
}

// WarehouseClientMockUnbookProductsExpectation specifies expectation struct of the WarehouseClient.UnbookProducts
type WarehouseClientMockUnbookProductsExpectation struct {
	mock    *WarehouseClientMock
	params  *WarehouseClientMockUnbookProductsParams
	results *WarehouseClientMockUnbookProductsResults
	Counter uint64
}

// WarehouseClientMockUnbookProductsParams contains parameters of the WarehouseClient.UnbookProducts
type WarehouseClientMockUnbookProductsParams struct {
	ctx context.Context
	up1 *whAPI.UnbookProductsRequest
}

// WarehouseClientMockUnbookProductsResults contains results of the WarehouseClient.UnbookProducts
type WarehouseClientMockUnbookProductsResults struct {
	ep1 *api.Empty
	err error
}

// Expect sets up expected params for WarehouseClient.UnbookProducts
func (mmUnbookProducts *mWarehouseClientMockUnbookProducts) Expect(ctx context.Context, up1 *whAPI.UnbookProductsRequest) *mWarehouseClientMockUnbookProducts {
	if mmUnbookProducts.mock.funcUnbookProducts != nil {
		mmUnbookProducts.mock.t.Fatalf("WarehouseClientMock.UnbookProducts mock is already set by Set")
	}

	if mmUnbookProducts.defaultExpectation == nil {
		mmUnbookProducts.defaultExpectation = &WarehouseClientMockUnbookProductsExpectation{}
	}

	mmUnbookProducts.defaultExpectation.params = &WarehouseClientMockUnbookProductsParams{ctx, up1}
	for _, e := range mmUnbookProducts.expectations {
		if minimock.Equal(e.params, mmUnbookProducts.defaultExpectation.params) {
			mmUnbookProducts.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmUnbookProducts.defaultExpectation.params)
		}
	}

	return mmUnbookProducts
}

// Inspect accepts an inspector function that has same arguments as the WarehouseClient.UnbookProducts
func (mmUnbookProducts *mWarehouseClientMockUnbookProducts) Inspect(f func(ctx context.Context, up1 *whAPI.UnbookProductsRequest)) *mWarehouseClientMockUnbookProducts {
	if mmUnbookProducts.mock.inspectFuncUnbookProducts != nil {
		mmUnbookProducts.mock.t.Fatalf("Inspect function is already set for WarehouseClientMock.UnbookProducts")
	}

	mmUnbookProducts.mock.inspectFuncUnbookProducts = f

	return mmUnbookProducts
}

// Return sets up results that will be returned by WarehouseClient.UnbookProducts
func (mmUnbookProducts *mWarehouseClientMockUnbookProducts) Return(ep1 *api.Empty, err error) *WarehouseClientMock {
	if mmUnbookProducts.mock.funcUnbookProducts != nil {
		mmUnbookProducts.mock.t.Fatalf("WarehouseClientMock.UnbookProducts mock is already set by Set")
	}

	if mmUnbookProducts.defaultExpectation == nil {
		mmUnbookProducts.defaultExpectation = &WarehouseClientMockUnbookProductsExpectation{mock: mmUnbookProducts.mock}
	}
	mmUnbookProducts.defaultExpectation.results = &WarehouseClientMockUnbookProductsResults{ep1, err}
	return mmUnbookProducts.mock
}

//Set uses given function f to mock the WarehouseClient.UnbookProducts method
func (mmUnbookProducts *mWarehouseClientMockUnbookProducts) Set(f func(ctx context.Context, up1 *whAPI.UnbookProductsRequest) (ep1 *api.Empty, err error)) *WarehouseClientMock {
	if mmUnbookProducts.defaultExpectation != nil {
		mmUnbookProducts.mock.t.Fatalf("Default expectation is already set for the WarehouseClient.UnbookProducts method")
	}

	if len(mmUnbookProducts.expectations) > 0 {
		mmUnbookProducts.mock.t.Fatalf("Some expectations are already set for the WarehouseClient.UnbookProducts method")
	}

	mmUnbookProducts.mock.funcUnbookProducts = f
	return mmUnbookProducts.mock
}

// When sets expectation for the WarehouseClient.UnbookProducts which will trigger the result defined by the following
// Then helper
func (mmUnbookProducts *mWarehouseClientMockUnbookProducts) When(ctx context.Context, up1 *whAPI.UnbookProductsRequest) *WarehouseClientMockUnbookProductsExpectation {
	if mmUnbookProducts.mock.funcUnbookProducts != nil {
		mmUnbookProducts.mock.t.Fatalf("WarehouseClientMock.UnbookProducts mock is already set by Set")
	}

	expectation := &WarehouseClientMockUnbookProductsExpectation{
		mock:   mmUnbookProducts.mock,
		params: &WarehouseClientMockUnbookProductsParams{ctx, up1},
	}
	mmUnbookProducts.expectations = append(mmUnbookProducts.expectations, expectation)
	return expectation
}

// Then sets up WarehouseClient.UnbookProducts return parameters for the expectation previously defined by the When method
func (e *WarehouseClientMockUnbookProductsExpectation) Then(ep1 *api.Empty, err error) *WarehouseClientMock {
	e.results = &WarehouseClientMockUnbookProductsResults{ep1, err}
	return e.mock
}

// UnbookProducts implements WarehouseClient
func (mmUnbookProducts *WarehouseClientMock) UnbookProducts(ctx context.Context, up1 *whAPI.UnbookProductsRequest) (ep1 *api.Empty, err error) {
	mm_atomic.AddUint64(&mmUnbookProducts.beforeUnbookProductsCounter, 1)
	defer mm_atomic.AddUint64(&mmUnbookProducts.afterUnbookProductsCounter, 1)

	if mmUnbookProducts.inspectFuncUnbookProducts != nil {
		mmUnbookProducts.inspectFuncUnbookProducts(ctx, up1)
	}

	mm_params := &WarehouseClientMockUnbookProductsParams{ctx, up1}

	// Record call args
	mmUnbookProducts.UnbookProductsMock.mutex.Lock()
	mmUnbookProducts.UnbookProductsMock.callArgs = append(mmUnbookProducts.UnbookProductsMock.callArgs, mm_params)
	mmUnbookProducts.UnbookProductsMock.mutex.Unlock()

	for _, e := range mmUnbookProducts.UnbookProductsMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.ep1, e.results.err
		}
	}

	if mmUnbookProducts.UnbookProductsMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmUnbookProducts.UnbookProductsMock.defaultExpectation.Counter, 1)
		mm_want := mmUnbookProducts.UnbookProductsMock.defaultExpectation.params
		mm_got := WarehouseClientMockUnbookProductsParams{ctx, up1}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmUnbookProducts.t.Errorf("WarehouseClientMock.UnbookProducts got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmUnbookProducts.UnbookProductsMock.defaultExpectation.results
		if mm_results == nil {
			mmUnbookProducts.t.Fatal("No results are set for the WarehouseClientMock.UnbookProducts")
		}
		return (*mm_results).ep1, (*mm_results).err
	}
	if mmUnbookProducts.funcUnbookProducts != nil {
		return mmUnbookProducts.funcUnbookProducts(ctx, up1)
	}
	mmUnbookProducts.t.Fatalf("Unexpected call to WarehouseClientMock.UnbookProducts. %v %v", ctx, up1)
	return
}

// UnbookProductsAfterCounter returns a count of finished WarehouseClientMock.UnbookProducts invocations
func (mmUnbookProducts *WarehouseClientMock) UnbookProductsAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUnbookProducts.afterUnbookProductsCounter)
}

// UnbookProductsBeforeCounter returns a count of WarehouseClientMock.UnbookProducts invocations
func (mmUnbookProducts *WarehouseClientMock) UnbookProductsBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUnbookProducts.beforeUnbookProductsCounter)
}

// Calls returns a list of arguments used in each call to WarehouseClientMock.UnbookProducts.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmUnbookProducts *mWarehouseClientMockUnbookProducts) Calls() []*WarehouseClientMockUnbookProductsParams {
	mmUnbookProducts.mutex.RLock()

	argCopy := make([]*WarehouseClientMockUnbookProductsParams, len(mmUnbookProducts.callArgs))
	copy(argCopy, mmUnbookProducts.callArgs)

	mmUnbookProducts.mutex.RUnlock()

	return argCopy
}

// MinimockUnbookProductsDone returns true if the count of the UnbookProducts invocations corresponds
// the number of defined expectations
func (m *WarehouseClientMock) MinimockUnbookProductsDone() bool {
	for _, e := range m.UnbookProductsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.UnbookProductsMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterUnbookProductsCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcUnbookProducts != nil && mm_atomic.LoadUint64(&m.afterUnbookProductsCounter) < 1 {
		return false
	}
	return true
}

// MinimockUnbookProductsInspect logs each unmet expectation
func (m *WarehouseClientMock) MinimockUnbookProductsInspect() {
	for _, e := range m.UnbookProductsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to WarehouseClientMock.UnbookProducts with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.UnbookProductsMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterUnbookProductsCounter) < 1 {
		if m.UnbookProductsMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to WarehouseClientMock.UnbookProducts")
		} else {
			m.t.Errorf("Expected call to WarehouseClientMock.UnbookProducts with params: %#v", *m.UnbookProductsMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcUnbookProducts != nil && mm_atomic.LoadUint64(&m.afterUnbookProductsCounter) < 1 {
		m.t.Error("Expected call to WarehouseClientMock.UnbookProducts")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *WarehouseClientMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockBookProductsInspect()

		m.MinimockCheckProductsInspect()

		m.MinimockUnbookProductsInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *WarehouseClientMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *WarehouseClientMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockBookProductsDone() &&
		m.MinimockCheckProductsDone() &&
		m.MinimockUnbookProductsDone()
}
