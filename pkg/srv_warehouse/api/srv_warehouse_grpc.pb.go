// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: api/srv_warehouse.proto

package api

import (
	context "context"
	api "gitlab.ozon.dev/lvjonok/homework-3/pkg/common/api"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WarehouseClient is the client API for Warehouse service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WarehouseClient interface {
	RegisterProduct(ctx context.Context, in *RegisterProductRequest, opts ...grpc.CallOption) (*RegisterProductResponse, error)
	CheckProducts(ctx context.Context, in *CheckProductsRequest, opts ...grpc.CallOption) (*CheckProductsResponse, error)
	BookProducts(ctx context.Context, in *BookProductsRequest, opts ...grpc.CallOption) (*BookProductsResponse, error)
	UnbookProducts(ctx context.Context, in *UnbookProductsRequest, opts ...grpc.CallOption) (*api.Empty, error)
}

type warehouseClient struct {
	cc grpc.ClientConnInterface
}

func NewWarehouseClient(cc grpc.ClientConnInterface) WarehouseClient {
	return &warehouseClient{cc}
}

func (c *warehouseClient) RegisterProduct(ctx context.Context, in *RegisterProductRequest, opts ...grpc.CallOption) (*RegisterProductResponse, error) {
	out := new(RegisterProductResponse)
	err := c.cc.Invoke(ctx, "/api_service_warehouse.Warehouse/RegisterProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warehouseClient) CheckProducts(ctx context.Context, in *CheckProductsRequest, opts ...grpc.CallOption) (*CheckProductsResponse, error) {
	out := new(CheckProductsResponse)
	err := c.cc.Invoke(ctx, "/api_service_warehouse.Warehouse/CheckProducts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warehouseClient) BookProducts(ctx context.Context, in *BookProductsRequest, opts ...grpc.CallOption) (*BookProductsResponse, error) {
	out := new(BookProductsResponse)
	err := c.cc.Invoke(ctx, "/api_service_warehouse.Warehouse/BookProducts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warehouseClient) UnbookProducts(ctx context.Context, in *UnbookProductsRequest, opts ...grpc.CallOption) (*api.Empty, error) {
	out := new(api.Empty)
	err := c.cc.Invoke(ctx, "/api_service_warehouse.Warehouse/UnbookProducts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WarehouseServer is the server API for Warehouse service.
// All implementations must embed UnimplementedWarehouseServer
// for forward compatibility
type WarehouseServer interface {
	RegisterProduct(context.Context, *RegisterProductRequest) (*RegisterProductResponse, error)
	CheckProducts(context.Context, *CheckProductsRequest) (*CheckProductsResponse, error)
	BookProducts(context.Context, *BookProductsRequest) (*BookProductsResponse, error)
	UnbookProducts(context.Context, *UnbookProductsRequest) (*api.Empty, error)
	mustEmbedUnimplementedWarehouseServer()
}

// UnimplementedWarehouseServer must be embedded to have forward compatible implementations.
type UnimplementedWarehouseServer struct {
}

func (UnimplementedWarehouseServer) RegisterProduct(context.Context, *RegisterProductRequest) (*RegisterProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterProduct not implemented")
}
func (UnimplementedWarehouseServer) CheckProducts(context.Context, *CheckProductsRequest) (*CheckProductsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckProducts not implemented")
}
func (UnimplementedWarehouseServer) BookProducts(context.Context, *BookProductsRequest) (*BookProductsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BookProducts not implemented")
}
func (UnimplementedWarehouseServer) UnbookProducts(context.Context, *UnbookProductsRequest) (*api.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnbookProducts not implemented")
}
func (UnimplementedWarehouseServer) mustEmbedUnimplementedWarehouseServer() {}

// UnsafeWarehouseServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WarehouseServer will
// result in compilation errors.
type UnsafeWarehouseServer interface {
	mustEmbedUnimplementedWarehouseServer()
}

func RegisterWarehouseServer(s grpc.ServiceRegistrar, srv WarehouseServer) {
	s.RegisterService(&Warehouse_ServiceDesc, srv)
}

func _Warehouse_RegisterProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarehouseServer).RegisterProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api_service_warehouse.Warehouse/RegisterProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarehouseServer).RegisterProduct(ctx, req.(*RegisterProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Warehouse_CheckProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckProductsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarehouseServer).CheckProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api_service_warehouse.Warehouse/CheckProducts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarehouseServer).CheckProducts(ctx, req.(*CheckProductsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Warehouse_BookProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookProductsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarehouseServer).BookProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api_service_warehouse.Warehouse/BookProducts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarehouseServer).BookProducts(ctx, req.(*BookProductsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Warehouse_UnbookProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnbookProductsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarehouseServer).UnbookProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api_service_warehouse.Warehouse/UnbookProducts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarehouseServer).UnbookProducts(ctx, req.(*UnbookProductsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Warehouse_ServiceDesc is the grpc.ServiceDesc for Warehouse service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Warehouse_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api_service_warehouse.Warehouse",
	HandlerType: (*WarehouseServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterProduct",
			Handler:    _Warehouse_RegisterProduct_Handler,
		},
		{
			MethodName: "CheckProducts",
			Handler:    _Warehouse_CheckProducts_Handler,
		},
		{
			MethodName: "BookProducts",
			Handler:    _Warehouse_BookProducts_Handler,
		},
		{
			MethodName: "UnbookProducts",
			Handler:    _Warehouse_UnbookProducts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/srv_warehouse.proto",
}
